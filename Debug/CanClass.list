
CanClass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002598  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c8  080026c8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080026c8  080026c8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c8  080026c8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d0  080026d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080026d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000018  080026ec  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080026ec  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be65  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cf7  00000000  00000000  0002bea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005e8  00000000  00000000  0002dba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000530  00000000  00000000  0002e188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001676b  00000000  00000000  0002e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006923  00000000  00000000  00044e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006be95  00000000  00000000  0004b746  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b75db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001628  00000000  00000000  000b7658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	0800268c 	.word	0x0800268c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	0800268c 	.word	0x0800268c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 ff77 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f84c 	bl	8002204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 ff8f 	bl	80010ba <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 ff57 	bl	8001066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000f4 	.word	0x200000f4

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000f4 	.word	0x200000f4

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d101      	bne.n	8000266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	e0ed      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d102      	bne.n	8000278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f001 fff8 	bl	8002268 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f022 0202 	bic.w	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000288:	f7ff ffb8 	bl	80001fc <HAL_GetTick>
 800028c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800028e:	e012      	b.n	80002b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000290:	f7ff ffb4 	bl	80001fc <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	2b0a      	cmp	r3, #10
 800029c:	d90b      	bls.n	80002b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2205      	movs	r2, #5
 80002ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	e0c5      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1e5      	bne.n	8000290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f042 0201 	orr.w	r2, r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002d4:	f7ff ff92 	bl	80001fc <HAL_GetTick>
 80002d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002da:	e012      	b.n	8000302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002dc:	f7ff ff8e 	bl	80001fc <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b0a      	cmp	r3, #10
 80002e8:	d90b      	bls.n	8000302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2205      	movs	r2, #5
 80002fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002fe:	2301      	movs	r3, #1
 8000300:	e09f      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e5      	beq.n	80002dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7e1b      	ldrb	r3, [r3, #24]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d108      	bne.n	800032a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e007      	b.n	800033a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7e5b      	ldrb	r3, [r3, #25]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d108      	bne.n	8000354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e007      	b.n	8000364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7e9b      	ldrb	r3, [r3, #26]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d108      	bne.n	800037e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f042 0220 	orr.w	r2, r2, #32
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	e007      	b.n	800038e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f022 0220 	bic.w	r2, r2, #32
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7edb      	ldrb	r3, [r3, #27]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d108      	bne.n	80003a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f022 0210 	bic.w	r2, r2, #16
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e007      	b.n	80003b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f042 0210 	orr.w	r2, r2, #16
 80003b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7f1b      	ldrb	r3, [r3, #28]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d108      	bne.n	80003d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f042 0208 	orr.w	r2, r2, #8
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	e007      	b.n	80003e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f022 0208 	bic.w	r2, r2, #8
 80003e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7f5b      	ldrb	r3, [r3, #29]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d108      	bne.n	80003fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f042 0204 	orr.w	r2, r2, #4
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	e007      	b.n	800040c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f022 0204 	bic.w	r2, r2, #4
 800040a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	689a      	ldr	r2, [r3, #8]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	431a      	orrs	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	691b      	ldr	r3, [r3, #16]
 800041a:	431a      	orrs	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	ea42 0103 	orr.w	r1, r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	430a      	orrs	r2, r1
 8000430:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800044a:	b480      	push	{r7}
 800044c:	b087      	sub	sp, #28
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000460:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000462:	7cfb      	ldrb	r3, [r7, #19]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d003      	beq.n	8000470 <HAL_CAN_ConfigFilter+0x26>
 8000468:	7cfb      	ldrb	r3, [r7, #19]
 800046a:	2b02      	cmp	r3, #2
 800046c:	f040 80aa 	bne.w	80005c4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000476:	f043 0201 	orr.w	r2, r3, #1
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f003 031f 	and.w	r3, r3, #31
 8000488:	2201      	movs	r2, #1
 800048a:	fa02 f303 	lsl.w	r3, r2, r3
 800048e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	43db      	mvns	r3, r3
 800049a:	401a      	ands	r2, r3
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d123      	bne.n	80004f2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	43db      	mvns	r3, r3
 80004b4:	401a      	ands	r2, r3
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004c8:	683a      	ldr	r2, [r7, #0]
 80004ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	3248      	adds	r2, #72	; 0x48
 80004d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004e8:	6979      	ldr	r1, [r7, #20]
 80004ea:	3348      	adds	r3, #72	; 0x48
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	440b      	add	r3, r1
 80004f0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d122      	bne.n	8000540 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	431a      	orrs	r2, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800051a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	3248      	adds	r2, #72	; 0x48
 8000520:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000534:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000536:	6979      	ldr	r1, [r7, #20]
 8000538:	3348      	adds	r3, #72	; 0x48
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	440b      	add	r3, r1
 800053e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d109      	bne.n	800055c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	43db      	mvns	r3, r3
 8000552:	401a      	ands	r2, r3
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800055a:	e007      	b.n	800056c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	431a      	orrs	r2, r3
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	691b      	ldr	r3, [r3, #16]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d109      	bne.n	8000588 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	43db      	mvns	r3, r3
 800057e:	401a      	ands	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000586:	e007      	b.n	8000598 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	431a      	orrs	r2, r3
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	6a1b      	ldr	r3, [r3, #32]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d107      	bne.n	80005b0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	431a      	orrs	r2, r3
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005b6:	f023 0201 	bic.w	r2, r3, #1
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e006      	b.n	80005d2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
  }
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	371c      	adds	r7, #28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d12e      	bne.n	800064e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2202      	movs	r2, #2
 80005f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f022 0201 	bic.w	r2, r2, #1
 8000606:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000608:	f7ff fdf8 	bl	80001fc <HAL_GetTick>
 800060c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800060e:	e012      	b.n	8000636 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000610:	f7ff fdf4 	bl	80001fc <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d90b      	bls.n	8000636 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000622:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2205      	movs	r2, #5
 800062e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	e012      	b.n	800065c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1e5      	bne.n	8000610 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e006      	b.n	800065c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000652:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
  }
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000664:	b480      	push	{r7}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000678:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000682:	7ffb      	ldrb	r3, [r7, #31]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d003      	beq.n	8000690 <HAL_CAN_AddTxMessage+0x2c>
 8000688:	7ffb      	ldrb	r3, [r7, #31]
 800068a:	2b02      	cmp	r3, #2
 800068c:	f040 80b8 	bne.w	8000800 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000696:	2b00      	cmp	r3, #0
 8000698:	d10a      	bne.n	80006b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d105      	bne.n	80006b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f000 80a0 	beq.w	80007f0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	0e1b      	lsrs	r3, r3, #24
 80006b4:	f003 0303 	and.w	r3, r3, #3
 80006b8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d907      	bls.n	80006d0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	e09e      	b.n	800080e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80006d0:	2201      	movs	r2, #1
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	409a      	lsls	r2, r3
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10d      	bne.n	80006fe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80006ec:	68f9      	ldr	r1, [r7, #12]
 80006ee:	6809      	ldr	r1, [r1, #0]
 80006f0:	431a      	orrs	r2, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3318      	adds	r3, #24
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	440b      	add	r3, r1
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	e00f      	b.n	800071e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000708:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800070e:	68f9      	ldr	r1, [r7, #12]
 8000710:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000712:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3318      	adds	r3, #24
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	440b      	add	r3, r1
 800071c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6819      	ldr	r1, [r3, #0]
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	691a      	ldr	r2, [r3, #16]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3318      	adds	r3, #24
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	440b      	add	r3, r1
 800072e:	3304      	adds	r3, #4
 8000730:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	7d1b      	ldrb	r3, [r3, #20]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d111      	bne.n	800075e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3318      	adds	r3, #24
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	4413      	add	r3, r2
 8000746:	3304      	adds	r3, #4
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	6811      	ldr	r1, [r2, #0]
 800074e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3318      	adds	r3, #24
 8000756:	011b      	lsls	r3, r3, #4
 8000758:	440b      	add	r3, r1
 800075a:	3304      	adds	r3, #4
 800075c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	3307      	adds	r3, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	061a      	lsls	r2, r3, #24
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3306      	adds	r3, #6
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	041b      	lsls	r3, r3, #16
 800076e:	431a      	orrs	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3305      	adds	r3, #5
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	4313      	orrs	r3, r2
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	3204      	adds	r2, #4
 800077e:	7812      	ldrb	r2, [r2, #0]
 8000780:	4610      	mov	r0, r2
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	6811      	ldr	r1, [r2, #0]
 8000786:	ea43 0200 	orr.w	r2, r3, r0
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	440b      	add	r3, r1
 8000790:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000794:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3303      	adds	r3, #3
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	061a      	lsls	r2, r3, #24
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	3302      	adds	r3, #2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	041b      	lsls	r3, r3, #16
 80007a6:	431a      	orrs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3301      	adds	r3, #1
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	4313      	orrs	r3, r2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	4610      	mov	r0, r2
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	6811      	ldr	r1, [r2, #0]
 80007bc:	ea43 0200 	orr.w	r2, r3, r0
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	440b      	add	r3, r1
 80007c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80007ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3318      	adds	r3, #24
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	4413      	add	r3, r2
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	6811      	ldr	r1, [r2, #0]
 80007de:	f043 0201 	orr.w	r2, r3, #1
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3318      	adds	r3, #24
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	440b      	add	r3, r1
 80007ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80007ec:	2300      	movs	r3, #0
 80007ee:	e00e      	b.n	800080e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80007fc:	2301      	movs	r3, #1
 80007fe:	e006      	b.n	800080e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000804:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800080c:	2301      	movs	r3, #1
  }
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800082c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800082e:	7dfb      	ldrb	r3, [r7, #23]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d003      	beq.n	800083c <HAL_CAN_GetRxMessage+0x24>
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	2b02      	cmp	r3, #2
 8000838:	f040 80f4 	bne.w	8000a24 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10e      	bne.n	8000860 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d116      	bne.n	800087e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000854:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	e0e8      	b.n	8000a32 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	f003 0303 	and.w	r3, r3, #3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d107      	bne.n	800087e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000872:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e0d9      	b.n	8000a32 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	331b      	adds	r3, #27
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	4413      	add	r3, r2
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f003 0204 	and.w	r2, r3, #4
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10c      	bne.n	80008b6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	331b      	adds	r3, #27
 80008a4:	011b      	lsls	r3, r3, #4
 80008a6:	4413      	add	r3, r2
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	0d5b      	lsrs	r3, r3, #21
 80008ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e00b      	b.n	80008ce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	331b      	adds	r3, #27
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	4413      	add	r3, r2
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	331b      	adds	r3, #27
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	4413      	add	r3, r2
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	f003 0201 	and.w	r2, r3, #1
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	331b      	adds	r3, #27
 80008ee:	011b      	lsls	r3, r3, #4
 80008f0:	4413      	add	r3, r2
 80008f2:	3304      	adds	r3, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f003 020f 	and.w	r2, r3, #15
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	331b      	adds	r3, #27
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	4413      	add	r3, r2
 800090a:	3304      	adds	r3, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	0a1b      	lsrs	r3, r3, #8
 8000910:	b2da      	uxtb	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	331b      	adds	r3, #27
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	4413      	add	r3, r2
 8000922:	3304      	adds	r3, #4
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	0c1b      	lsrs	r3, r3, #16
 8000928:	b29a      	uxth	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	4413      	add	r3, r2
 8000938:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	4413      	add	r3, r2
 800094e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	0a1a      	lsrs	r2, r3, #8
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	4413      	add	r3, r2
 8000968:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	0c1a      	lsrs	r2, r3, #16
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	3302      	adds	r3, #2
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	011b      	lsls	r3, r3, #4
 8000980:	4413      	add	r3, r2
 8000982:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	0e1a      	lsrs	r2, r3, #24
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	3303      	adds	r3, #3
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	4413      	add	r3, r2
 800099c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	3304      	adds	r3, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	4413      	add	r3, r2
 80009b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	0a1a      	lsrs	r2, r3, #8
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3305      	adds	r3, #5
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	4413      	add	r3, r2
 80009ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	0c1a      	lsrs	r2, r3, #16
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	3306      	adds	r3, #6
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	4413      	add	r3, r2
 80009e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	0e1a      	lsrs	r2, r3, #24
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	3307      	adds	r3, #7
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d108      	bne.n	8000a10 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f042 0220 	orr.w	r2, r2, #32
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	e007      	b.n	8000a20 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	691a      	ldr	r2, [r3, #16]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f042 0220 	orr.w	r2, r2, #32
 8000a1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	e006      	b.n	8000a32 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
  }
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	371c      	adds	r7, #28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a4c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d002      	beq.n	8000a5a <HAL_CAN_ActivateNotification+0x1e>
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d109      	bne.n	8000a6e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6959      	ldr	r1, [r3, #20]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	430a      	orrs	r2, r1
 8000a68:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e006      	b.n	8000a7c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
  }
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b08a      	sub	sp, #40	; 0x28
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d07c      	beq.n	8000bc6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d023      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2201      	movs	r2, #1
 8000adc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 f97d 	bl	8000de8 <HAL_CAN_TxMailbox0CompleteCallback>
 8000aee:	e016      	b.n	8000b1e <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d004      	beq.n	8000b04 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
 8000b02:	e00c      	b.n	8000b1e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
 8000b16:	e002      	b.n	8000b1e <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f980 	bl	8000e1e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d024      	beq.n	8000b72 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f95c 	bl	8000dfa <HAL_CAN_TxMailbox1CompleteCallback>
 8000b42:	e016      	b.n	8000b72 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d004      	beq.n	8000b58 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
 8000b56:	e00c      	b.n	8000b72 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d004      	beq.n	8000b6c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6a:	e002      	b.n	8000b72 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 f95f 	bl	8000e30 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d024      	beq.n	8000bc6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f93b 	bl	8000e0c <HAL_CAN_TxMailbox2CompleteCallback>
 8000b96:	e016      	b.n	8000bc6 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8000baa:	e00c      	b.n	8000bc6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000bbe:	e002      	b.n	8000bc6 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f93e 	bl	8000e42 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00c      	beq.n	8000bea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d007      	beq.n	8000bea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2210      	movs	r2, #16
 8000be8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00b      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d006      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2208      	movs	r2, #8
 8000c04:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 f924 	bl	8000e54 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d009      	beq.n	8000c2a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f001 fc17 	bl	8002458 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00c      	beq.n	8000c4e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2210      	movs	r2, #16
 8000c4c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c4e:	6a3b      	ldr	r3, [r7, #32]
 8000c50:	f003 0320 	and.w	r3, r3, #32
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00b      	beq.n	8000c70 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2208      	movs	r2, #8
 8000c68:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 f904 	bl	8000e78 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000c70:	6a3b      	ldr	r3, [r7, #32]
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d009      	beq.n	8000c8e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d002      	beq.n	8000c8e <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 f8ec 	bl	8000e66 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00b      	beq.n	8000cb0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2210      	movs	r2, #16
 8000ca8:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f8ed 	bl	8000e8a <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00b      	beq.n	8000cd2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2208      	movs	r2, #8
 8000cca:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f8e5 	bl	8000e9c <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d075      	beq.n	8000dc8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d06c      	beq.n	8000dc0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d008      	beq.n	8000d02 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d008      	beq.n	8000d1e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d1e:	6a3b      	ldr	r3, [r7, #32]
 8000d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d008      	beq.n	8000d3a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
 8000d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d03d      	beq.n	8000dc0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d038      	beq.n	8000dc0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d54:	2b30      	cmp	r3, #48	; 0x30
 8000d56:	d017      	beq.n	8000d88 <HAL_CAN_IRQHandler+0x302>
 8000d58:	2b30      	cmp	r3, #48	; 0x30
 8000d5a:	d804      	bhi.n	8000d66 <HAL_CAN_IRQHandler+0x2e0>
 8000d5c:	2b10      	cmp	r3, #16
 8000d5e:	d009      	beq.n	8000d74 <HAL_CAN_IRQHandler+0x2ee>
 8000d60:	2b20      	cmp	r3, #32
 8000d62:	d00c      	beq.n	8000d7e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000d64:	e024      	b.n	8000db0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000d66:	2b50      	cmp	r3, #80	; 0x50
 8000d68:	d018      	beq.n	8000d9c <HAL_CAN_IRQHandler+0x316>
 8000d6a:	2b60      	cmp	r3, #96	; 0x60
 8000d6c:	d01b      	beq.n	8000da6 <HAL_CAN_IRQHandler+0x320>
 8000d6e:	2b40      	cmp	r3, #64	; 0x40
 8000d70:	d00f      	beq.n	8000d92 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000d72:	e01d      	b.n	8000db0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	f043 0308 	orr.w	r3, r3, #8
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d7c:	e018      	b.n	8000db0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	f043 0310 	orr.w	r3, r3, #16
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d86:	e013      	b.n	8000db0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	f043 0320 	orr.w	r3, r3, #32
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d90:	e00e      	b.n	8000db0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d9a:	e009      	b.n	8000db0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000da4:	e004      	b.n	8000db0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000dbe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d008      	beq.n	8000de0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 f867 	bl	8000eae <HAL_CAN_ErrorCallback>
  }
}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4906      	ldr	r1, [pc, #24]	; (8000f50 <NVIC_EnableIRQ+0x2c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	da0b      	bge.n	8000f80 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <NVIC_SetPriority+0x4c>)
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	3b04      	subs	r3, #4
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7e:	e009      	b.n	8000f94 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <NVIC_SetPriority+0x50>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001030:	f7ff ff90 	bl	8000f54 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff31 	bl	8000ec0 <NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff46 	bl	8000f08 <NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff90 	bl	8000fa8 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5f 	bl	8000f54 <NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff39 	bl	8000f24 <NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa2 	bl	800100c <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b08b      	sub	sp, #44	; 0x2c
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
 80010f6:	e127      	b.n	8001348 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80010f8:	2201      	movs	r2, #1
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8116 	bne.w	8001342 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b12      	cmp	r3, #18
 800111c:	d034      	beq.n	8001188 <HAL_GPIO_Init+0xb4>
 800111e:	2b12      	cmp	r3, #18
 8001120:	d80d      	bhi.n	800113e <HAL_GPIO_Init+0x6a>
 8001122:	2b02      	cmp	r3, #2
 8001124:	d02b      	beq.n	800117e <HAL_GPIO_Init+0xaa>
 8001126:	2b02      	cmp	r3, #2
 8001128:	d804      	bhi.n	8001134 <HAL_GPIO_Init+0x60>
 800112a:	2b00      	cmp	r3, #0
 800112c:	d031      	beq.n	8001192 <HAL_GPIO_Init+0xbe>
 800112e:	2b01      	cmp	r3, #1
 8001130:	d01c      	beq.n	800116c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001132:	e048      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001134:	2b03      	cmp	r3, #3
 8001136:	d043      	beq.n	80011c0 <HAL_GPIO_Init+0xec>
 8001138:	2b11      	cmp	r3, #17
 800113a:	d01b      	beq.n	8001174 <HAL_GPIO_Init+0xa0>
          break;
 800113c:	e043      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800113e:	4a87      	ldr	r2, [pc, #540]	; (800135c <HAL_GPIO_Init+0x288>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d026      	beq.n	8001192 <HAL_GPIO_Init+0xbe>
 8001144:	4a85      	ldr	r2, [pc, #532]	; (800135c <HAL_GPIO_Init+0x288>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d806      	bhi.n	8001158 <HAL_GPIO_Init+0x84>
 800114a:	4a85      	ldr	r2, [pc, #532]	; (8001360 <HAL_GPIO_Init+0x28c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d020      	beq.n	8001192 <HAL_GPIO_Init+0xbe>
 8001150:	4a84      	ldr	r2, [pc, #528]	; (8001364 <HAL_GPIO_Init+0x290>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01d      	beq.n	8001192 <HAL_GPIO_Init+0xbe>
          break;
 8001156:	e036      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001158:	4a83      	ldr	r2, [pc, #524]	; (8001368 <HAL_GPIO_Init+0x294>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0xbe>
 800115e:	4a83      	ldr	r2, [pc, #524]	; (800136c <HAL_GPIO_Init+0x298>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d016      	beq.n	8001192 <HAL_GPIO_Init+0xbe>
 8001164:	4a82      	ldr	r2, [pc, #520]	; (8001370 <HAL_GPIO_Init+0x29c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d013      	beq.n	8001192 <HAL_GPIO_Init+0xbe>
          break;
 800116a:	e02c      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	623b      	str	r3, [r7, #32]
          break;
 8001172:	e028      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	3304      	adds	r3, #4
 800117a:	623b      	str	r3, [r7, #32]
          break;
 800117c:	e023      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	3308      	adds	r3, #8
 8001184:	623b      	str	r3, [r7, #32]
          break;
 8001186:	e01e      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	330c      	adds	r3, #12
 800118e:	623b      	str	r3, [r7, #32]
          break;
 8001190:	e019      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800119a:	2304      	movs	r3, #4
 800119c:	623b      	str	r3, [r7, #32]
          break;
 800119e:	e012      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d105      	bne.n	80011b4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a8:	2308      	movs	r3, #8
 80011aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	611a      	str	r2, [r3, #16]
          break;
 80011b2:	e008      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b4:	2308      	movs	r3, #8
 80011b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	615a      	str	r2, [r3, #20]
          break;
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2bff      	cmp	r3, #255	; 0xff
 80011ca:	d801      	bhi.n	80011d0 <HAL_GPIO_Init+0xfc>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	e001      	b.n	80011d4 <HAL_GPIO_Init+0x100>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3304      	adds	r3, #4
 80011d4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2bff      	cmp	r3, #255	; 0xff
 80011da:	d802      	bhi.n	80011e2 <HAL_GPIO_Init+0x10e>
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x114>
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	3b08      	subs	r3, #8
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	210f      	movs	r1, #15
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	6a39      	ldr	r1, [r7, #32]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	431a      	orrs	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 8096 	beq.w	8001342 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b57      	ldr	r3, [pc, #348]	; (8001374 <HAL_GPIO_Init+0x2a0>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a56      	ldr	r2, [pc, #344]	; (8001374 <HAL_GPIO_Init+0x2a0>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b54      	ldr	r3, [pc, #336]	; (8001374 <HAL_GPIO_Init+0x2a0>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800122e:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_GPIO_Init+0x2a4>)
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	4013      	ands	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a49      	ldr	r2, [pc, #292]	; (800137c <HAL_GPIO_Init+0x2a8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x1ae>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a48      	ldr	r2, [pc, #288]	; (8001380 <HAL_GPIO_Init+0x2ac>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x1aa>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a47      	ldr	r2, [pc, #284]	; (8001384 <HAL_GPIO_Init+0x2b0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x1a6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a46      	ldr	r2, [pc, #280]	; (8001388 <HAL_GPIO_Init+0x2b4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x1a2>
 8001272:	2303      	movs	r3, #3
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x1b0>
 8001276:	2304      	movs	r3, #4
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x1b0>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x1b0>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x1b0>
 8001282:	2300      	movs	r3, #0
 8001284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001294:	4938      	ldr	r1, [pc, #224]	; (8001378 <HAL_GPIO_Init+0x2a4>)
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ae:	4b37      	ldr	r3, [pc, #220]	; (800138c <HAL_GPIO_Init+0x2b8>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4936      	ldr	r1, [pc, #216]	; (800138c <HAL_GPIO_Init+0x2b8>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
 80012ba:	e006      	b.n	80012ca <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012bc:	4b33      	ldr	r3, [pc, #204]	; (800138c <HAL_GPIO_Init+0x2b8>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4931      	ldr	r1, [pc, #196]	; (800138c <HAL_GPIO_Init+0x2b8>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_GPIO_Init+0x2b8>)
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	492c      	ldr	r1, [pc, #176]	; (800138c <HAL_GPIO_Init+0x2b8>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
 80012e2:	e006      	b.n	80012f2 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <HAL_GPIO_Init+0x2b8>)
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4927      	ldr	r1, [pc, #156]	; (800138c <HAL_GPIO_Init+0x2b8>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_GPIO_Init+0x2b8>)
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	4922      	ldr	r1, [pc, #136]	; (800138c <HAL_GPIO_Init+0x2b8>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_GPIO_Init+0x2b8>)
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	43db      	mvns	r3, r3
 8001314:	491d      	ldr	r1, [pc, #116]	; (800138c <HAL_GPIO_Init+0x2b8>)
 8001316:	4013      	ands	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_GPIO_Init+0x2b8>)
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	4918      	ldr	r1, [pc, #96]	; (800138c <HAL_GPIO_Init+0x2b8>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	60cb      	str	r3, [r1, #12]
 8001332:	e006      	b.n	8001342 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_GPIO_Init+0x2b8>)
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	43db      	mvns	r3, r3
 800133c:	4913      	ldr	r1, [pc, #76]	; (800138c <HAL_GPIO_Init+0x2b8>)
 800133e:	4013      	ands	r3, r2
 8001340:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	3301      	adds	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f aed4 	bls.w	80010f8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	372c      	adds	r7, #44	; 0x2c
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	10210000 	.word	0x10210000
 8001360:	10110000 	.word	0x10110000
 8001364:	10120000 	.word	0x10120000
 8001368:	10310000 	.word	0x10310000
 800136c:	10320000 	.word	0x10320000
 8001370:	10220000 	.word	0x10220000
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	40010800 	.word	0x40010800
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40011000 	.word	0x40011000
 8001388:	40011400 	.word	0x40011400
 800138c:	40010400 	.word	0x40010400

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	611a      	str	r2, [r3, #16]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8087 	beq.w	80014e8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013da:	4b92      	ldr	r3, [pc, #584]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d00c      	beq.n	8001400 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e6:	4b8f      	ldr	r3, [pc, #572]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d112      	bne.n	8001418 <HAL_RCC_OscConfig+0x58>
 80013f2:	4b8c      	ldr	r3, [pc, #560]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fe:	d10b      	bne.n	8001418 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d06c      	beq.n	80014e6 <HAL_RCC_OscConfig+0x126>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d168      	bne.n	80014e6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e22d      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x70>
 8001422:	4b80      	ldr	r3, [pc, #512]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a7f      	ldr	r2, [pc, #508]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e02e      	b.n	800148e <HAL_RCC_OscConfig+0xce>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10c      	bne.n	8001452 <HAL_RCC_OscConfig+0x92>
 8001438:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a79      	ldr	r2, [pc, #484]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800143e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b77      	ldr	r3, [pc, #476]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a76      	ldr	r2, [pc, #472]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800144a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	e01d      	b.n	800148e <HAL_RCC_OscConfig+0xce>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145a:	d10c      	bne.n	8001476 <HAL_RCC_OscConfig+0xb6>
 800145c:	4b71      	ldr	r3, [pc, #452]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a70      	ldr	r2, [pc, #448]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b6e      	ldr	r3, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6d      	ldr	r2, [pc, #436]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800146e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e00b      	b.n	800148e <HAL_RCC_OscConfig+0xce>
 8001476:	4b6b      	ldr	r3, [pc, #428]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6a      	ldr	r2, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800147c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b68      	ldr	r3, [pc, #416]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a67      	ldr	r2, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d013      	beq.n	80014be <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7fe feb1 	bl	80001fc <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149e:	f7fe fead 	bl	80001fc <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b64      	cmp	r3, #100	; 0x64
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e1e1      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b0:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0xde>
 80014bc:	e014      	b.n	80014e8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7fe fe9d 	bl	80001fc <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c6:	f7fe fe99 	bl	80001fc <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b64      	cmp	r3, #100	; 0x64
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e1cd      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d8:	4b52      	ldr	r3, [pc, #328]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x106>
 80014e4:	e000      	b.n	80014e8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d063      	beq.n	80015bc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014f4:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001500:	4b48      	ldr	r3, [pc, #288]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b08      	cmp	r3, #8
 800150a:	d11c      	bne.n	8001546 <HAL_RCC_OscConfig+0x186>
 800150c:	4b45      	ldr	r3, [pc, #276]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d116      	bne.n	8001546 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x170>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d001      	beq.n	8001530 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e1a1      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4939      	ldr	r1, [pc, #228]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001544:	e03a      	b.n	80015bc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d020      	beq.n	8001590 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154e:	4b36      	ldr	r3, [pc, #216]	; (8001628 <HAL_RCC_OscConfig+0x268>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7fe fe52 	bl	80001fc <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7fe fe4e 	bl	80001fc <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e182      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4926      	ldr	r1, [pc, #152]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
 800158e:	e015      	b.n	80015bc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_RCC_OscConfig+0x268>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7fe fe31 	bl	80001fc <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159e:	f7fe fe2d 	bl	80001fc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e161      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d039      	beq.n	800163c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d019      	beq.n	8001604 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7fe fe11 	bl	80001fc <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015de:	f7fe fe0d 	bl	80001fc <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e141      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_RCC_OscConfig+0x264>)
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f000 fab1 	bl	8001b64 <RCC_Delay>
 8001602:	e01b      	b.n	800163c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160a:	f7fe fdf7 	bl	80001fc <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	e00e      	b.n	8001630 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001612:	f7fe fdf3 	bl	80001fc <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d907      	bls.n	8001630 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e127      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
 8001624:	40021000 	.word	0x40021000
 8001628:	42420000 	.word	0x42420000
 800162c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001630:	4b92      	ldr	r3, [pc, #584]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ea      	bne.n	8001612 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a6 	beq.w	8001796 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164e:	4b8b      	ldr	r3, [pc, #556]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10d      	bne.n	8001676 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b88      	ldr	r3, [pc, #544]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a87      	ldr	r2, [pc, #540]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b85      	ldr	r3, [pc, #532]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001672:	2301      	movs	r3, #1
 8001674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	4b82      	ldr	r3, [pc, #520]	; (8001880 <HAL_RCC_OscConfig+0x4c0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001682:	4b7f      	ldr	r3, [pc, #508]	; (8001880 <HAL_RCC_OscConfig+0x4c0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a7e      	ldr	r2, [pc, #504]	; (8001880 <HAL_RCC_OscConfig+0x4c0>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168e:	f7fe fdb5 	bl	80001fc <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7fe fdb1 	bl	80001fc <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b64      	cmp	r3, #100	; 0x64
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e0e5      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	4b75      	ldr	r3, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x4c0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x30a>
 80016bc:	4b6f      	ldr	r3, [pc, #444]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a6e      	ldr	r2, [pc, #440]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	e02d      	b.n	8001726 <HAL_RCC_OscConfig+0x366>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x32c>
 80016d2:	4b6a      	ldr	r3, [pc, #424]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a69      	ldr	r2, [pc, #420]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	6213      	str	r3, [r2, #32]
 80016de:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4a66      	ldr	r2, [pc, #408]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	e01c      	b.n	8001726 <HAL_RCC_OscConfig+0x366>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d10c      	bne.n	800170e <HAL_RCC_OscConfig+0x34e>
 80016f4:	4b61      	ldr	r3, [pc, #388]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4a60      	ldr	r2, [pc, #384]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	4b5e      	ldr	r3, [pc, #376]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a5d      	ldr	r2, [pc, #372]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	e00b      	b.n	8001726 <HAL_RCC_OscConfig+0x366>
 800170e:	4b5b      	ldr	r3, [pc, #364]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a5a      	ldr	r2, [pc, #360]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6213      	str	r3, [r2, #32]
 800171a:	4b58      	ldr	r3, [pc, #352]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a57      	ldr	r2, [pc, #348]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d015      	beq.n	800175a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7fe fd65 	bl	80001fc <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7fe fd61 	bl	80001fc <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	; 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e093      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174c:	4b4b      	ldr	r3, [pc, #300]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0ee      	beq.n	8001736 <HAL_RCC_OscConfig+0x376>
 8001758:	e014      	b.n	8001784 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7fe fd4f 	bl	80001fc <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7fe fd4b 	bl	80001fc <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e07d      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001778:	4b40      	ldr	r3, [pc, #256]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1ee      	bne.n	8001762 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d105      	bne.n	8001796 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178a:	4b3c      	ldr	r3, [pc, #240]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a3b      	ldr	r2, [pc, #236]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d069      	beq.n	8001872 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d061      	beq.n	800186e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d146      	bne.n	8001840 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b2:	4b34      	ldr	r3, [pc, #208]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7fe fd20 	bl	80001fc <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7fe fd1c 	bl	80001fc <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e050      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e6:	d108      	bne.n	80017fa <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4921      	ldr	r1, [pc, #132]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a19      	ldr	r1, [r3, #32]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	430b      	orrs	r3, r1
 800180c:	491b      	ldr	r1, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7fe fcf0 	bl	80001fc <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001820:	f7fe fcec 	bl	80001fc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e020      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x460>
 800183e:	e018      	b.n	8001872 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7fe fcd9 	bl	80001fc <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184e:	f7fe fcd5 	bl	80001fc <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e009      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_RCC_OscConfig+0x4bc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x48e>
 800186c:	e001      	b.n	8001872 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	40007000 	.word	0x40007000
 8001884:	42420060 	.word	0x42420060

08001888 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001896:	4b7e      	ldr	r3, [pc, #504]	; (8001a90 <HAL_RCC_ClockConfig+0x208>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d910      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a4:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <HAL_RCC_ClockConfig+0x208>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 0207 	bic.w	r2, r3, #7
 80018ac:	4978      	ldr	r1, [pc, #480]	; (8001a90 <HAL_RCC_ClockConfig+0x208>)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b4:	4b76      	ldr	r3, [pc, #472]	; (8001a90 <HAL_RCC_ClockConfig+0x208>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0e0      	b.n	8001a88 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d020      	beq.n	8001914 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018de:	4b6d      	ldr	r3, [pc, #436]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a6c      	ldr	r2, [pc, #432]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 80018e4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018e8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f6:	4b67      	ldr	r3, [pc, #412]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4a66      	ldr	r2, [pc, #408]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 80018fc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001900:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001902:	4b64      	ldr	r3, [pc, #400]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4961      	ldr	r1, [pc, #388]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d06a      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001928:	4b5a      	ldr	r3, [pc, #360]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d115      	bne.n	8001960 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0a7      	b.n	8001a88 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d107      	bne.n	8001950 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	4b54      	ldr	r3, [pc, #336]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d109      	bne.n	8001960 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e09b      	b.n	8001a88 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e093      	b.n	8001a88 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001960:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f023 0203 	bic.w	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4949      	ldr	r1, [pc, #292]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001972:	f7fe fc43 	bl	80001fc <HAL_GetTick>
 8001976:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d112      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001980:	e00a      	b.n	8001998 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001982:	f7fe fc3b 	bl	80001fc <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e077      	b.n	8001a88 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001998:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d1ee      	bne.n	8001982 <HAL_RCC_ClockConfig+0xfa>
 80019a4:	e027      	b.n	80019f6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d11d      	bne.n	80019ea <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b0:	f7fe fc24 	bl	80001fc <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e060      	b.n	8001a88 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c6:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d1ee      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x128>
 80019d2:	e010      	b.n	80019f6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7fe fc12 	bl	80001fc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e04e      	b.n	8001a88 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ea:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ee      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_RCC_ClockConfig+0x208>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d210      	bcs.n	8001a26 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_RCC_ClockConfig+0x208>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 0207 	bic.w	r2, r3, #7
 8001a0c:	4920      	ldr	r1, [pc, #128]	; (8001a90 <HAL_RCC_ClockConfig+0x208>)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_RCC_ClockConfig+0x208>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e030      	b.n	8001a88 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d008      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	4915      	ldr	r1, [pc, #84]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d009      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	490d      	ldr	r1, [pc, #52]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a64:	f000 f81c 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a68:	4601      	mov	r1, r0
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <HAL_RCC_ClockConfig+0x210>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	fa21 f303 	lsr.w	r3, r1, r3
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_RCC_ClockConfig+0x214>)
 8001a7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7fe fb79 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40022000 	.word	0x40022000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	080026b8 	.word	0x080026b8
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b490      	push	{r4, r7}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aa8:	1d3c      	adds	r4, r7, #4
 8001aaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x46>
 8001ade:	e02d      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ae2:	623b      	str	r3, [r7, #32]
      break;
 8001ae4:	e02d      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	0c9b      	lsrs	r3, r3, #18
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001af2:	4413      	add	r3, r2
 8001af4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001af8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	0c5b      	lsrs	r3, r3, #17
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b12:	4413      	add	r3, r2
 8001b14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b18:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b1e:	fb02 f203 	mul.w	r2, r2, r3
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	e004      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	623b      	str	r3, [r7, #32]
      break;
 8001b3a:	e002      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b3e:	623b      	str	r3, [r7, #32]
      break;
 8001b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b42:	6a3b      	ldr	r3, [r7, #32]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3728      	adds	r7, #40	; 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc90      	pop	{r4, r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	080026a4 	.word	0x080026a4
 8001b54:	080026b4 	.word	0x080026b4
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	007a1200 	.word	0x007a1200
 8001b60:	003d0900 	.word	0x003d0900

08001b64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <RCC_Delay+0x34>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <RCC_Delay+0x38>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0a5b      	lsrs	r3, r3, #9
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001b80:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	60fa      	str	r2, [r7, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f9      	bne.n	8001b80 <RCC_Delay+0x1c>
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	10624dd3 	.word	0x10624dd3

08001ba0 <_ZN8CanClassC1Ev>:
 *      Author: ryu
 */
#include "stm32f1xx_hal.h"
#include "CanClass.hpp"

CanClass::CanClass()
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	675a      	str	r2, [r3, #116]	; 0x74
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	679a      	str	r2, [r3, #120]	; 0x78
{
}
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <_ZN8CanClass4initEv>:

void CanClass::init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    // default to 125 kbit/s
    prescaler = 48;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2230      	movs	r2, #48	; 0x30
 8001bd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hcan.Instance = CAN1;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <_ZN8CanClass4initEv+0x5c>)
 8001bdc:	601a      	str	r2, [r3, #0]
    bus_state = OFF_BUS;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

	tx_header.RTR = CAN_RTR_DATA;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34
	tx_header.IDE = CAN_ID_STD;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
	tx_header.StdId = 0xfff;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
	tx_header.ExtId = 0;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
	tx_header.DLC = 8;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2208      	movs	r2, #8
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38

	can_set_bitrate(CAN_BITRATE_500K);
 8001c06:	2106      	movs	r1, #6
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8d5 	bl	8001db8 <_ZN8CanClass15can_set_bitrateE11can_bitrate>
	can_set_silent(0);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f929 	bl	8001e68 <_ZN8CanClass14can_set_silentEh>
	can_enable();
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f86a 	bl	8001cf0 <_ZN8CanClass10can_enableEv>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40006400 	.word	0x40006400

08001c28 <_ZN8CanClass14can_set_filterEmm>:

void CanClass::can_set_filter(uint32_t id, uint32_t mask)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
    // see page 825 of RM0091 for details on filters
    // set the standard ID part
    filter.FilterIdHigh = (id & 0x7FF) << 5;
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	015b      	lsls	r3, r3, #5
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	67da      	str	r2, [r3, #124]	; 0x7c
    // add the top 5 bits of the extended ID
    filter.FilterIdHigh += (id >> 24) & 0xFFFF;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	0e1b      	lsrs	r3, r3, #24
 8001c46:	441a      	add	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	67da      	str	r2, [r3, #124]	; 0x7c
    // set the low part to the remaining extended ID bits
    filter.FilterIdLow += ((id & 0x1FFFF800) << 3);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c5e:	441a      	add	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    // set the standard ID part
    filter.FilterMaskIdHigh = (mask & 0x7FF) << 5;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	015b      	lsls	r3, r3, #5
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    // add the top 5 bits of the extended ID
    filter.FilterMaskIdHigh += (mask >> 24) & 0xFFFF;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	0e1b      	lsrs	r3, r3, #24
 8001c7c:	441a      	add	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    // set the low part to the remaining extended ID bits
    filter.FilterMaskIdLow += ((mask & 0x1FFFF800) << 3);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c96:	441a      	add	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    filter.FilterBank = 0;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    filter.SlaveStartFilterBank = 0;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    filter.FilterActivation = ENABLE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    if (bus_state == ON_BUS)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <_ZN8CanClass14can_set_filterEmm+0xbe>
    {
        HAL_CAN_ConfigFilter(&hcan, &filter);
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	337c      	adds	r3, #124	; 0x7c
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	f7fe fbb2 	bl	800044a <HAL_CAN_ConfigFilter>
    }
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <_ZN8CanClass10can_enableEv>:

void CanClass::can_enable(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    if (bus_state == OFF_BUS)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d150      	bne.n	8001da4 <_ZN8CanClass10can_enableEv+0xb4>
    {
        hcan.Init.Prescaler = prescaler;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	605a      	str	r2, [r3, #4]
        hcan.Init.Mode = CAN_MODE_NORMAL;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
        hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
        hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d1e:	611a      	str	r2, [r3, #16]
        hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d26:	615a      	str	r2, [r3, #20]
        hcan.Init.TimeTriggeredMode = DISABLE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	761a      	strb	r2, [r3, #24]
        hcan.Init.AutoBusOff = DISABLE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	765a      	strb	r2, [r3, #25]
        hcan.Init.AutoWakeUp = DISABLE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	769a      	strb	r2, [r3, #26]
        hcan.Init.AutoRetransmission = ENABLE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	76da      	strb	r2, [r3, #27]
        hcan.Init.ReceiveFifoLocked = DISABLE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	771a      	strb	r2, [r3, #28]
        hcan.Init.TransmitFifoPriority = DISABLE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	775a      	strb	r2, [r3, #29]
        //hcan.pTxMsg = NULL;
        HAL_CAN_Init(&hcan);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fa80 	bl	8000254 <HAL_CAN_Init>
        bus_state = ON_BUS;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        can_set_filter(0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff61 	bl	8001c28 <_ZN8CanClass14can_set_filterEmm>



        /* Start the CAN peripheral */
        if (HAL_CAN_Start(&hcan) != HAL_OK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fc37 	bl	80005dc <HAL_CAN_Start>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <_ZN8CanClass10can_enableEv+0x94>
        {
          /* Start Error */
          Error_Handler();
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f91a 	bl	8001fb8 <_ZN8CanClass13Error_HandlerEv>
        }

        /* Activate CAN RX notification */
        if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2102      	movs	r1, #2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fe57 	bl	8000a3c <HAL_CAN_ActivateNotification>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf14      	ite	ne
 8001d94:	2301      	movne	r3, #1
 8001d96:	2300      	moveq	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <_ZN8CanClass10can_enableEv+0xb4>
        {
          /* Notification Error */
          Error_Handler();
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f90a 	bl	8001fb8 <_ZN8CanClass13Error_HandlerEv>
        }
    }

    GPIOB->BSRR = GPIO_BSRR_BS0;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <_ZN8CanClass10can_enableEv+0xc4>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	611a      	str	r2, [r3, #16]
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40010c00 	.word	0x40010c00

08001db8 <_ZN8CanClass15can_set_bitrateE11can_bitrate>:
    GPIOB->BSRR = GPIO_BSRR_BR0;
    GPIOA->BSRR = GPIO_BSRR_BR11;
}

void CanClass::can_set_bitrate(enum can_bitrate bitrate)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
    if (bus_state == ON_BUS)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d047      	beq.n	8001e5e <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa6>
    {
        // cannot set bitrate while on bus
        return;
    }

    switch (bitrate)
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d845      	bhi.n	8001e60 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
 8001dd4:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <_ZN8CanClass15can_set_bitrateE11can_bitrate+0x24>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001e01 	.word	0x08001e01
 8001de0:	08001e0d 	.word	0x08001e0d
 8001de4:	08001e17 	.word	0x08001e17
 8001de8:	08001e21 	.word	0x08001e21
 8001dec:	08001e2b 	.word	0x08001e2b
 8001df0:	08001e35 	.word	0x08001e35
 8001df4:	08001e3f 	.word	0x08001e3f
 8001df8:	08001e49 	.word	0x08001e49
 8001dfc:	08001e53 	.word	0x08001e53
    {
        case CAN_BITRATE_10K:
            prescaler = 450;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001e06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001e0a:	e029      	b.n	8001e60 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_20K:
            prescaler = 225;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	22e1      	movs	r2, #225	; 0xe1
 8001e10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001e14:	e024      	b.n	8001e60 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_50K:
            prescaler = 90;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	225a      	movs	r2, #90	; 0x5a
 8001e1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001e1e:	e01f      	b.n	8001e60 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_100K:
            prescaler = 45;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	222d      	movs	r2, #45	; 0x2d
 8001e24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001e28:	e01a      	b.n	8001e60 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_125K:
            prescaler = 36;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2224      	movs	r2, #36	; 0x24
 8001e2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001e32:	e015      	b.n	8001e60 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_250K:
            prescaler = 18;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2212      	movs	r2, #18
 8001e38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001e3c:	e010      	b.n	8001e60 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_500K:
            prescaler = 9;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2209      	movs	r2, #9
 8001e42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001e46:	e00b      	b.n	8001e60 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_750K:
            prescaler = 6;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2206      	movs	r2, #6
 8001e4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001e50:	e006      	b.n	8001e60 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_1000K:
            prescaler = 4;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001e5a:	bf00      	nop
 8001e5c:	e000      	b.n	8001e60 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        return;
 8001e5e:	bf00      	nop
    }
}
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <_ZN8CanClass14can_set_silentEh>:

void CanClass::can_set_silent(uint8_t silent)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
    if (bus_state == ON_BUS)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d00b      	beq.n	8001e96 <_ZN8CanClass14can_set_silentEh+0x2e>
    {
        // cannot set silent mode while on bus
        return;
    }
    if (silent)
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <_ZN8CanClass14can_set_silentEh+0x26>
    {
        hcan.Init.Mode = CAN_MODE_SILENT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	e004      	b.n	8001e98 <_ZN8CanClass14can_set_silentEh+0x30>
    }
    else
    {
        hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	e000      	b.n	8001e98 <_ZN8CanClass14can_set_silentEh+0x30>
        return;
 8001e96:	bf00      	nop
    }
}
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <_ZN8CanClass6can_txEP19CAN_TxHeaderTypeDefRA8_h>:

uint32_t CanClass::can_tx(CAN_TxHeaderTypeDef *tx_header, uint8_t (&buf)[CAN_MTU])
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
    uint32_t status;

    uint32_t tx_mailbox;
    status = HAL_CAN_AddTxMessage(&hcan, tx_header, buf, &tx_mailbox);
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	f7fe fbd5 	bl	8000664 <HAL_CAN_AddTxMessage>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	617b      	str	r3, [r7, #20]

    GPIOA->BSRR=GPIO_BSRR_BS11;
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <_ZN8CanClass6can_txEP19CAN_TxHeaderTypeDefRA8_h+0x38>)
 8001ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ec4:	611a      	str	r2, [r3, #16]
    GPIOA->BSRR=GPIO_BSRR_BR11;
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <_ZN8CanClass6can_txEP19CAN_TxHeaderTypeDefRA8_h+0x38>)
 8001ec8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ecc:	611a      	str	r2, [r3, #16]

    //led_on();
    return status;
 8001ece:	697b      	ldr	r3, [r7, #20]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40010800 	.word	0x40010800

08001edc <_ZN8CanClass6can_rxEP19CAN_RxHeaderTypeDefRA8_h>:

uint32_t CanClass::can_rx(CAN_RxHeaderTypeDef *rx_header, uint8_t (&buf)[CAN_MTU])
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
    uint32_t status;

    status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, rx_header, buf);
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f7fe fc92 	bl	8000818 <HAL_CAN_GetRxMessage>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	617b      	str	r3, [r7, #20]

    //led_on(); later
    return status;
 8001ef8:	697b      	ldr	r3, [r7, #20]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <_ZN8CanClass5enditEv>:
        return 0;
    }
    return (HAL_CAN_GetRxFifoFillLevel(&hcan, fifo) > 0);
}

void CanClass::endit(){
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
	rx_flag = 0;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	led_on();
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f804 	bl	8001f20 <_ZN8CanClass6led_onEv>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZN8CanClass6led_onEv>:

// Attempt to turn on status LED
void CanClass::led_on(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	// Make sure the LED has been off for at least LED_DURATION before turning on again
	// This prevents a solid status LED on a busy canbus
	if(led_laston == 0 && HAL_GetTick() - led_lastoff > LED_DURATION)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <_ZN8CanClass6led_onEv+0x24>
 8001f30:	f7fe f964 	bl	80001fc <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b0a      	cmp	r3, #10
 8001f3e:	d901      	bls.n	8001f44 <_ZN8CanClass6led_onEv+0x24>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <_ZN8CanClass6led_onEv+0x26>
 8001f44:	2300      	movs	r3, #0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d008      	beq.n	8001f5c <_ZN8CanClass6led_onEv+0x3c>
	{
	    GPIOA->BSRR = GPIO_BSRR_BS11;
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <_ZN8CanClass6led_onEv+0x44>)
 8001f4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f50:	611a      	str	r2, [r3, #16]
		led_laston = HAL_GetTick();
 8001f52:	f7fe f953 	bl	80001fc <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	675a      	str	r2, [r3, #116]	; 0x74
	}
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40010800 	.word	0x40010800

08001f68 <_ZN8CanClass11led_processEv>:

// Process time-based LED events
void CanClass::led_process(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	// If LED has been on for long enough, turn it off
	if(led_laston > 0 && HAL_GetTick() - led_laston > LED_DURATION)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <_ZN8CanClass11led_processEv+0x24>
 8001f78:	f7fe f940 	bl	80001fc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b0a      	cmp	r3, #10
 8001f86:	d901      	bls.n	8001f8c <_ZN8CanClass11led_processEv+0x24>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <_ZN8CanClass11led_processEv+0x26>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <_ZN8CanClass11led_processEv+0x42>
	{
        GPIOA->BSRR = GPIO_BSRR_BR11;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <_ZN8CanClass11led_processEv+0x4c>)
 8001f94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f98:	611a      	str	r2, [r3, #16]
		led_laston = 0;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	675a      	str	r2, [r3, #116]	; 0x74
		led_lastoff = HAL_GetTick();
 8001fa0:	f7fe f92c 	bl	80001fc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	679a      	str	r2, [r3, #120]	; 0x78
	}
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40010800 	.word	0x40010800

08001fb8 <_ZN8CanClass13Error_HandlerEv>:

void CanClass::Error_Handler(void){
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fce:	f7fe f8bd 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd2:	f000 f807 	bl	8001fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd6:	f000 f87f 	bl	80020d8 <MX_GPIO_Init>
  MX_CAN_Init();
 8001fda:	f000 f849 	bl	8002070 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  main_cpp();
 8001fde:	f000 fa13 	bl	8002408 <main_cpp>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
 8001fe2:	e7fe      	b.n	8001fe2 <main+0x18>

08001fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b090      	sub	sp, #64	; 0x40
 8001fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fea:	f107 0318 	add.w	r3, r7, #24
 8001fee:	2228      	movs	r2, #40	; 0x28
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fb42 	bl	800267c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
 8002004:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002006:	2301      	movs	r3, #1
 8002008:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800200a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800200e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002014:	2301      	movs	r3, #1
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002018:	2302      	movs	r3, #2
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800201c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002022:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f9c7 	bl	80013c0 <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002038:	f000 f8de 	bl	80021f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203c:	230f      	movs	r3, #15
 800203e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002040:	2302      	movs	r3, #2
 8002042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2102      	movs	r1, #2
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fc16 	bl	8001888 <HAL_RCC_ClockConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002062:	f000 f8c9 	bl	80021f8 <Error_Handler>
  }
}
 8002066:	bf00      	nop
 8002068:	3740      	adds	r7, #64	; 0x40
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <MX_CAN_Init+0x60>)
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <MX_CAN_Init+0x64>)
 8002078:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <MX_CAN_Init+0x60>)
 800207c:	2210      	movs	r2, #16
 800207e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <MX_CAN_Init+0x60>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <MX_CAN_Init+0x60>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800208c:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <MX_CAN_Init+0x60>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_CAN_Init+0x60>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002098:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <MX_CAN_Init+0x60>)
 800209a:	2200      	movs	r2, #0
 800209c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_CAN_Init+0x60>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <MX_CAN_Init+0x60>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_CAN_Init+0x60>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MX_CAN_Init+0x60>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_CAN_Init+0x60>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <MX_CAN_Init+0x60>)
 80020be:	f7fe f8c9 	bl	8000254 <HAL_CAN_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80020c8:	f000 f896 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200000f8 	.word	0x200000f8
 80020d4:	40006400 	.word	0x40006400

080020d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	f107 0310 	add.w	r3, r7, #16
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ec:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <MX_GPIO_Init+0x110>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a3d      	ldr	r2, [pc, #244]	; (80021e8 <MX_GPIO_Init+0x110>)
 80020f2:	f043 0310 	orr.w	r3, r3, #16
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <MX_GPIO_Init+0x110>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002104:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <MX_GPIO_Init+0x110>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a37      	ldr	r2, [pc, #220]	; (80021e8 <MX_GPIO_Init+0x110>)
 800210a:	f043 0320 	orr.w	r3, r3, #32
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <MX_GPIO_Init+0x110>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211c:	4b32      	ldr	r3, [pc, #200]	; (80021e8 <MX_GPIO_Init+0x110>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a31      	ldr	r2, [pc, #196]	; (80021e8 <MX_GPIO_Init+0x110>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <MX_GPIO_Init+0x110>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <MX_GPIO_Init+0x110>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <MX_GPIO_Init+0x110>)
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <MX_GPIO_Init+0x110>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002152:	4826      	ldr	r0, [pc, #152]	; (80021ec <MX_GPIO_Init+0x114>)
 8002154:	f7ff f91c 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8 
 8002158:	2200      	movs	r2, #0
 800215a:	f641 712c 	movw	r1, #7980	; 0x1f2c
 800215e:	4824      	ldr	r0, [pc, #144]	; (80021f0 <MX_GPIO_Init+0x118>)
 8002160:	f7ff f916 	bl	8001390 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002164:	2200      	movs	r2, #0
 8002166:	213f      	movs	r1, #63	; 0x3f
 8002168:	4822      	ldr	r0, [pc, #136]	; (80021f4 <MX_GPIO_Init+0x11c>)
 800216a:	f7ff f911 	bl	8001390 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800216e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002174:	2301      	movs	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2302      	movs	r3, #2
 800217e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	4619      	mov	r1, r3
 8002186:	4819      	ldr	r0, [pc, #100]	; (80021ec <MX_GPIO_Init+0x114>)
 8002188:	f7fe ffa4 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800218c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219a:	f107 0310 	add.w	r3, r7, #16
 800219e:	4619      	mov	r1, r3
 80021a0:	4812      	ldr	r0, [pc, #72]	; (80021ec <MX_GPIO_Init+0x114>)
 80021a2:	f7fe ff97 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA5 PA8 
                           PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8 
 80021a6:	f641 732c 	movw	r3, #7980	; 0x1f2c
 80021aa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ac:	2301      	movs	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2302      	movs	r3, #2
 80021b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	4619      	mov	r1, r3
 80021be:	480c      	ldr	r0, [pc, #48]	; (80021f0 <MX_GPIO_Init+0x118>)
 80021c0:	f7fe ff88 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80021c4:	233f      	movs	r3, #63	; 0x3f
 80021c6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2302      	movs	r3, #2
 80021d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	4619      	mov	r1, r3
 80021da:	4806      	ldr	r0, [pc, #24]	; (80021f4 <MX_GPIO_Init+0x11c>)
 80021dc:	f7fe ff7a 	bl	80010d4 <HAL_GPIO_Init>

}
 80021e0:	bf00      	nop
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40011000 	.word	0x40011000
 80021f0:	40010800 	.word	0x40010800
 80021f4:	40010c00 	.word	0x40010c00

080021f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_MspInit+0x5c>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	4a14      	ldr	r2, [pc, #80]	; (8002260 <HAL_MspInit+0x5c>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6193      	str	r3, [r2, #24]
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_MspInit+0x5c>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_MspInit+0x5c>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <HAL_MspInit+0x5c>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <HAL_MspInit+0x5c>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_MspInit+0x60>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_MspInit+0x60>)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	40021000 	.word	0x40021000
 8002264:	40010000 	.word	0x40010000

08002268 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a29      	ldr	r2, [pc, #164]	; (8002328 <HAL_CAN_MspInit+0xc0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d14b      	bne.n	8002320 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002288:	4b28      	ldr	r3, [pc, #160]	; (800232c <HAL_CAN_MspInit+0xc4>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	4a27      	ldr	r2, [pc, #156]	; (800232c <HAL_CAN_MspInit+0xc4>)
 800228e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002292:	61d3      	str	r3, [r2, #28]
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_CAN_MspInit+0xc4>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_CAN_MspInit+0xc4>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a21      	ldr	r2, [pc, #132]	; (800232c <HAL_CAN_MspInit+0xc4>)
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_CAN_MspInit+0xc4>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	4818      	ldr	r0, [pc, #96]	; (8002330 <HAL_CAN_MspInit+0xc8>)
 80022ce:	f7fe ff01 	bl	80010d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4812      	ldr	r0, [pc, #72]	; (8002330 <HAL_CAN_MspInit+0xc8>)
 80022e8:	f7fe fef4 	bl	80010d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_CAN_MspInit+0xcc>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_CAN_MspInit+0xcc>)
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	2014      	movs	r0, #20
 8002316:	f7fe fea6 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800231a:	2014      	movs	r0, #20
 800231c:	f7fe febf 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002320:	bf00      	nop
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40006400 	.word	0x40006400
 800232c:	40021000 	.word	0x40021000
 8002330:	40010c00 	.word	0x40010c00
 8002334:	40010000 	.word	0x40010000

08002338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <HardFault_Handler+0x4>

0800234a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <MemManage_Handler+0x4>

08002350 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <BusFault_Handler+0x4>

08002356 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <UsageFault_Handler+0x4>

0800235c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002384:	f7fd ff28 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}

0800238c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002392:	f7fe fb78 	bl	8000a86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200000f8 	.word	0x200000f8

080023a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <SystemInit+0x5c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <SystemInit+0x5c>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <SystemInit+0x5c>)
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4911      	ldr	r1, [pc, #68]	; (80023fc <SystemInit+0x5c>)
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <SystemInit+0x60>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <SystemInit+0x5c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <SystemInit+0x5c>)
 80023c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <SystemInit+0x5c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SystemInit+0x5c>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <SystemInit+0x5c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <SystemInit+0x5c>)
 80023de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SystemInit+0x5c>)
 80023e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <SystemInit+0x64>)
 80023ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000
 8002400:	f8ff0000 	.word	0xf8ff0000
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <main_cpp>:
#include "CanClass.hpp"
double X = 6.28;
double Y = 0.0;
double Z = 0.0;
CanClass can;
void main_cpp(void) {
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b083      	sub	sp, #12
 800240c:	af02      	add	r7, sp, #8
	can.init();
 800240e:	480f      	ldr	r0, [pc, #60]	; (800244c <main_cpp+0x44>)
 8002410:	f7ff fbda 	bl	8001bc8 <_ZN8CanClass4initEv>
    while(1){
    	can.send(X,0x205);
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <main_cpp+0x48>)
 8002416:	cb18      	ldmia	r3, {r3, r4}
 8002418:	f240 2205 	movw	r2, #517	; 0x205
 800241c:	9200      	str	r2, [sp, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4623      	mov	r3, r4
 8002422:	480a      	ldr	r0, [pc, #40]	; (800244c <main_cpp+0x44>)
 8002424:	f000 f836 	bl	8002494 <_ZN8CanClass4sendIdEEvT_m>
    	can.send(Y,0x206);
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <main_cpp+0x4c>)
 800242a:	cb18      	ldmia	r3, {r3, r4}
 800242c:	f240 2206 	movw	r2, #518	; 0x206
 8002430:	9200      	str	r2, [sp, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	4623      	mov	r3, r4
 8002436:	4805      	ldr	r0, [pc, #20]	; (800244c <main_cpp+0x44>)
 8002438:	f000 f82c 	bl	8002494 <_ZN8CanClass4sendIdEEvT_m>
    	can.led_process();
 800243c:	4803      	ldr	r0, [pc, #12]	; (800244c <main_cpp+0x44>)
 800243e:	f7ff fd93 	bl	8001f68 <_ZN8CanClass11led_processEv>
		HAL_Delay(50);
 8002442:	2032      	movs	r0, #50	; 0x32
 8002444:	f7fd fee4 	bl	8000210 <HAL_Delay>
    	can.send(X,0x205);
 8002448:	e7e4      	b.n	8002414 <main_cpp+0xc>
 800244a:	bf00      	nop
 800244c:	20000048 	.word	0x20000048
 8002450:	20000010 	.word	0x20000010
 8002454:	20000038 	.word	0x20000038

08002458 <HAL_CAN_RxFifo0MsgPendingCallback>:
    }

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	can.receive(Z, 0x4e2);
 8002460:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8002464:	4908      	ldr	r1, [pc, #32]	; (8002488 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002466:	4809      	ldr	r0, [pc, #36]	; (800248c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002468:	f000 f84c 	bl	8002504 <_ZN8CanClass7receiveIdEEvRT_m>
	can.receive(Y, 0x4e1);
 800246c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002472:	4806      	ldr	r0, [pc, #24]	; (800248c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002474:	f000 f846 	bl	8002504 <_ZN8CanClass7receiveIdEEvRT_m>
	can.endit();//割り込み終了
 8002478:	4804      	ldr	r0, [pc, #16]	; (800248c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800247a:	f7ff fd42 	bl	8001f02 <_ZN8CanClass5enditEv>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000040 	.word	0x20000040
 800248c:	20000048 	.word	0x20000048
 8002490:	20000038 	.word	0x20000038

08002494 <_ZN8CanClass4sendIdEEvT_m>:
	void led_on(void);
	void led_process(void);
};

template<typename T>
void CanClass::send(T data,uint32_t id)
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	e9c7 2300 	strd	r2, r3, [r7]
{
    _Encapsulator<T> _e;
    _e.data = data;
 80024a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80024a4:	e9c7 3404 	strd	r3, r4, [r7, #16]

    for (int i = sizeof(T); i > 0;)
 80024a8:	2308      	movs	r3, #8
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	dd18      	ble.n	80024e4 <_ZN8CanClass4sendIdEEvT_m+0x50>
    {
        i--;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
        tx_payload[i] = _e.i & 0xff;
 80024b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80024bc:	b2d9      	uxtb	r1, r3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
 80024c4:	3340      	adds	r3, #64	; 0x40
 80024c6:	460a      	mov	r2, r1
 80024c8:	701a      	strb	r2, [r3, #0]
        _e.i >>= 8;
 80024ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	f04f 0400 	mov.w	r4, #0
 80024d6:	0a0b      	lsrs	r3, r1, #8
 80024d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024dc:	0a14      	lsrs	r4, r2, #8
 80024de:	e9c7 3404 	strd	r3, r4, [r7, #16]
    for (int i = sizeof(T); i > 0;)
 80024e2:	e7e3      	b.n	80024ac <_ZN8CanClass4sendIdEEvT_m+0x18>
    }
    tx_header.StdId = id;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28
    can_tx(&tx_header, tx_payload);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3340      	adds	r3, #64	; 0x40
 80024f4:	461a      	mov	r2, r3
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff fcd2 	bl	8001ea0 <_ZN8CanClass6can_txEP19CAN_TxHeaderTypeDefRA8_h>
}
 80024fc:	bf00      	nop
 80024fe:	3724      	adds	r7, #36	; 0x24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}

08002504 <_ZN8CanClass7receiveIdEEvRT_m>:

template<typename T>
void CanClass::receive(T &data,uint32_t id)
 8002504:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002508:	b088      	sub	sp, #32
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
{

	status = can_rx(&rx_header, rx_payload);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3364      	adds	r3, #100	; 0x64
 800251c:	461a      	mov	r2, r3
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff fcdc 	bl	8001edc <_ZN8CanClass6can_rxEP19CAN_RxHeaderTypeDefRA8_h>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	66da      	str	r2, [r3, #108]	; 0x6c

	if (status == HAL_OK or rx_flag == 1)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <_ZN8CanClass7receiveIdEEvRT_m+0x38>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002538:	2b01      	cmp	r3, #1
 800253a:	d131      	bne.n	80025a0 <_ZN8CanClass7receiveIdEEvRT_m+0x9c>
	{
		if(rx_header.StdId == id){
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	d128      	bne.n	8002598 <_ZN8CanClass7receiveIdEEvRT_m+0x94>
			_Encapsulator<T> _e;

			for (int i = 0; i < sizeof(T); i++)
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2b07      	cmp	r3, #7
 800254e:	d81d      	bhi.n	800258c <_ZN8CanClass7receiveIdEEvRT_m+0x88>
			{
				_e.i = (_e.i << 8) | (uint64_t) (rx_payload[i]);
 8002550:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002554:	f04f 0b00 	mov.w	fp, #0
 8002558:	f04f 0c00 	mov.w	ip, #0
 800255c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8002560:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8002564:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	440a      	add	r2, r1
 800256e:	3264      	adds	r2, #100	; 0x64
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	b2d1      	uxtb	r1, r2
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	ea4b 0301 	orr.w	r3, fp, r1
 800257c:	ea4c 0402 	orr.w	r4, ip, r2
 8002580:	e9c7 3404 	strd	r3, r4, [r7, #16]
			for (int i = 0; i < sizeof(T); i++)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	3301      	adds	r3, #1
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e7de      	b.n	800254a <_ZN8CanClass7receiveIdEEvRT_m+0x46>
			}

			data = _e.data;
 800258c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	e9c2 3400 	strd	r3, r4, [r2]
		}
		else{
			rx_flag=1;
		}
	}
}
 8002596:	e003      	b.n	80025a0 <_ZN8CanClass7receiveIdEEvRT_m+0x9c>
			rx_flag=1;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 80025a0:	bf00      	nop
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
	...

080025ac <_Z41__static_initialization_and_destruction_0ii>:
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d102      	bne.n	80025cc <_Z41__static_initialization_and_destruction_0ii+0x20>
CanClass can;
 80025c6:	4803      	ldr	r0, [pc, #12]	; (80025d4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80025c8:	f7ff faea 	bl	8001ba0 <_ZN8CanClassC1Ev>
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000048 	.word	0x20000048

080025d8 <_GLOBAL__sub_I_X>:
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
 80025dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7ff ffe3 	bl	80025ac <_Z41__static_initialization_and_destruction_0ii>
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025ea:	e003      	b.n	80025f4 <LoopCopyDataInit>

080025ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025f2:	3104      	adds	r1, #4

080025f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025f4:	480a      	ldr	r0, [pc, #40]	; (8002620 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025fc:	d3f6      	bcc.n	80025ec <CopyDataInit>
  ldr r2, =_sbss
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002600:	e002      	b.n	8002608 <LoopFillZerobss>

08002602 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002604:	f842 3b04 	str.w	r3, [r2], #4

08002608 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800260a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800260c:	d3f9      	bcc.n	8002602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800260e:	f7ff fec7 	bl	80023a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002612:	f000 f80f 	bl	8002634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002616:	f7ff fcd8 	bl	8001fca <main>
  bx lr
 800261a:	4770      	bx	lr
  ldr r3, =_sidata
 800261c:	080026d4 	.word	0x080026d4
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002624:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8002628:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 800262c:	20000120 	.word	0x20000120

08002630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC1_2_IRQHandler>
	...

08002634 <__libc_init_array>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	2500      	movs	r5, #0
 8002638:	4e0c      	ldr	r6, [pc, #48]	; (800266c <__libc_init_array+0x38>)
 800263a:	4c0d      	ldr	r4, [pc, #52]	; (8002670 <__libc_init_array+0x3c>)
 800263c:	1ba4      	subs	r4, r4, r6
 800263e:	10a4      	asrs	r4, r4, #2
 8002640:	42a5      	cmp	r5, r4
 8002642:	d109      	bne.n	8002658 <__libc_init_array+0x24>
 8002644:	f000 f822 	bl	800268c <_init>
 8002648:	2500      	movs	r5, #0
 800264a:	4e0a      	ldr	r6, [pc, #40]	; (8002674 <__libc_init_array+0x40>)
 800264c:	4c0a      	ldr	r4, [pc, #40]	; (8002678 <__libc_init_array+0x44>)
 800264e:	1ba4      	subs	r4, r4, r6
 8002650:	10a4      	asrs	r4, r4, #2
 8002652:	42a5      	cmp	r5, r4
 8002654:	d105      	bne.n	8002662 <__libc_init_array+0x2e>
 8002656:	bd70      	pop	{r4, r5, r6, pc}
 8002658:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800265c:	4798      	blx	r3
 800265e:	3501      	adds	r5, #1
 8002660:	e7ee      	b.n	8002640 <__libc_init_array+0xc>
 8002662:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002666:	4798      	blx	r3
 8002668:	3501      	adds	r5, #1
 800266a:	e7f2      	b.n	8002652 <__libc_init_array+0x1e>
 800266c:	080026c8 	.word	0x080026c8
 8002670:	080026c8 	.word	0x080026c8
 8002674:	080026c8 	.word	0x080026c8
 8002678:	080026d0 	.word	0x080026d0

0800267c <memset>:
 800267c:	4603      	mov	r3, r0
 800267e:	4402      	add	r2, r0
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	f803 1b01 	strb.w	r1, [r3], #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <_init>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	bf00      	nop
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr

08002698 <_fini>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	bf00      	nop
 800269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269e:	bc08      	pop	{r3}
 80026a0:	469e      	mov	lr, r3
 80026a2:	4770      	bx	lr
