
CanClass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002424  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002530  08002530  00012530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002554  08002554  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002554  08002554  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002554  08002554  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800255c  0800255c  0001255c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  0800256c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800256c  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf15  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d22  00000000  00000000  0002bf4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005e0  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000528  00000000  00000000  0002e250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001676b  00000000  00000000  0002e778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006939  00000000  00000000  00044ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006be50  00000000  00000000  0004b81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b766c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015fc  00000000  00000000  000b76e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002518 	.word	0x08002518

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002518 	.word	0x08002518

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fe9d 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 ff2c 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 feb5 	bl	8000f06 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 fe7d 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000d8 	.word	0x200000d8

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000d8 	.word	0x200000d8

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d101      	bne.n	8000266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	e0ed      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d102      	bne.n	8000278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f001 fed8 	bl	8002028 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f022 0202 	bic.w	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000288:	f7ff ffb8 	bl	80001fc <HAL_GetTick>
 800028c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800028e:	e012      	b.n	80002b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000290:	f7ff ffb4 	bl	80001fc <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	2b0a      	cmp	r3, #10
 800029c:	d90b      	bls.n	80002b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2205      	movs	r2, #5
 80002ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	e0c5      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1e5      	bne.n	8000290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f042 0201 	orr.w	r2, r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002d4:	f7ff ff92 	bl	80001fc <HAL_GetTick>
 80002d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002da:	e012      	b.n	8000302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002dc:	f7ff ff8e 	bl	80001fc <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b0a      	cmp	r3, #10
 80002e8:	d90b      	bls.n	8000302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2205      	movs	r2, #5
 80002fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002fe:	2301      	movs	r3, #1
 8000300:	e09f      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e5      	beq.n	80002dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7e1b      	ldrb	r3, [r3, #24]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d108      	bne.n	800032a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e007      	b.n	800033a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7e5b      	ldrb	r3, [r3, #25]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d108      	bne.n	8000354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e007      	b.n	8000364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7e9b      	ldrb	r3, [r3, #26]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d108      	bne.n	800037e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f042 0220 	orr.w	r2, r2, #32
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	e007      	b.n	800038e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f022 0220 	bic.w	r2, r2, #32
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7edb      	ldrb	r3, [r3, #27]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d108      	bne.n	80003a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f022 0210 	bic.w	r2, r2, #16
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e007      	b.n	80003b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f042 0210 	orr.w	r2, r2, #16
 80003b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7f1b      	ldrb	r3, [r3, #28]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d108      	bne.n	80003d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f042 0208 	orr.w	r2, r2, #8
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	e007      	b.n	80003e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f022 0208 	bic.w	r2, r2, #8
 80003e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7f5b      	ldrb	r3, [r3, #29]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d108      	bne.n	80003fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f042 0204 	orr.w	r2, r2, #4
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	e007      	b.n	800040c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f022 0204 	bic.w	r2, r2, #4
 800040a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	689a      	ldr	r2, [r3, #8]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	431a      	orrs	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	691b      	ldr	r3, [r3, #16]
 800041a:	431a      	orrs	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	ea42 0103 	orr.w	r1, r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	430a      	orrs	r2, r1
 8000430:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800044a:	b480      	push	{r7}
 800044c:	b087      	sub	sp, #28
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000460:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000462:	7cfb      	ldrb	r3, [r7, #19]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d003      	beq.n	8000470 <HAL_CAN_ConfigFilter+0x26>
 8000468:	7cfb      	ldrb	r3, [r7, #19]
 800046a:	2b02      	cmp	r3, #2
 800046c:	f040 80aa 	bne.w	80005c4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000476:	f043 0201 	orr.w	r2, r3, #1
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f003 031f 	and.w	r3, r3, #31
 8000488:	2201      	movs	r2, #1
 800048a:	fa02 f303 	lsl.w	r3, r2, r3
 800048e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	43db      	mvns	r3, r3
 800049a:	401a      	ands	r2, r3
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d123      	bne.n	80004f2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	43db      	mvns	r3, r3
 80004b4:	401a      	ands	r2, r3
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004c8:	683a      	ldr	r2, [r7, #0]
 80004ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	3248      	adds	r2, #72	; 0x48
 80004d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004e8:	6979      	ldr	r1, [r7, #20]
 80004ea:	3348      	adds	r3, #72	; 0x48
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	440b      	add	r3, r1
 80004f0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d122      	bne.n	8000540 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	431a      	orrs	r2, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800051a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	3248      	adds	r2, #72	; 0x48
 8000520:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000534:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000536:	6979      	ldr	r1, [r7, #20]
 8000538:	3348      	adds	r3, #72	; 0x48
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	440b      	add	r3, r1
 800053e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d109      	bne.n	800055c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	43db      	mvns	r3, r3
 8000552:	401a      	ands	r2, r3
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800055a:	e007      	b.n	800056c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	431a      	orrs	r2, r3
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	691b      	ldr	r3, [r3, #16]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d109      	bne.n	8000588 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	43db      	mvns	r3, r3
 800057e:	401a      	ands	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000586:	e007      	b.n	8000598 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	431a      	orrs	r2, r3
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	6a1b      	ldr	r3, [r3, #32]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d107      	bne.n	80005b0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	431a      	orrs	r2, r3
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005b6:	f023 0201 	bic.w	r2, r3, #1
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e006      	b.n	80005d2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
  }
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	371c      	adds	r7, #28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d12e      	bne.n	800064e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2202      	movs	r2, #2
 80005f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f022 0201 	bic.w	r2, r2, #1
 8000606:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000608:	f7ff fdf8 	bl	80001fc <HAL_GetTick>
 800060c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800060e:	e012      	b.n	8000636 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000610:	f7ff fdf4 	bl	80001fc <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d90b      	bls.n	8000636 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000622:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2205      	movs	r2, #5
 800062e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	e012      	b.n	800065c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1e5      	bne.n	8000610 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e006      	b.n	800065c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000652:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
  }
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000678:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800067a:	7dfb      	ldrb	r3, [r7, #23]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d003      	beq.n	8000688 <HAL_CAN_GetRxMessage+0x24>
 8000680:	7dfb      	ldrb	r3, [r7, #23]
 8000682:	2b02      	cmp	r3, #2
 8000684:	f040 80f4 	bne.w	8000870 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d10e      	bne.n	80006ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	f003 0303 	and.w	r3, r3, #3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d116      	bne.n	80006ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e0e8      	b.n	800087e <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	f003 0303 	and.w	r3, r3, #3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d107      	bne.n	80006ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e0d9      	b.n	800087e <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	331b      	adds	r3, #27
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f003 0204 	and.w	r2, r3, #4
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10c      	bne.n	8000702 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	331b      	adds	r3, #27
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	0d5b      	lsrs	r3, r3, #21
 80006f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e00b      	b.n	800071a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	331b      	adds	r3, #27
 800070a:	011b      	lsls	r3, r3, #4
 800070c:	4413      	add	r3, r2
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	08db      	lsrs	r3, r3, #3
 8000712:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	331b      	adds	r3, #27
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	4413      	add	r3, r2
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	085b      	lsrs	r3, r3, #1
 800072a:	f003 0201 	and.w	r2, r3, #1
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	331b      	adds	r3, #27
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	4413      	add	r3, r2
 800073e:	3304      	adds	r3, #4
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f003 020f 	and.w	r2, r3, #15
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	331b      	adds	r3, #27
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	4413      	add	r3, r2
 8000756:	3304      	adds	r3, #4
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	0a1b      	lsrs	r3, r3, #8
 800075c:	b2da      	uxtb	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	331b      	adds	r3, #27
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	4413      	add	r3, r2
 800076e:	3304      	adds	r3, #4
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	b29a      	uxth	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	4413      	add	r3, r2
 8000784:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	011b      	lsls	r3, r3, #4
 8000798:	4413      	add	r3, r2
 800079a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	0a1a      	lsrs	r2, r3, #8
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	4413      	add	r3, r2
 80007b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	0c1a      	lsrs	r2, r3, #16
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	3302      	adds	r3, #2
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	4413      	add	r3, r2
 80007ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	0e1a      	lsrs	r2, r3, #24
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	3303      	adds	r3, #3
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	011b      	lsls	r3, r3, #4
 80007e6:	4413      	add	r3, r2
 80007e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	3304      	adds	r3, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	4413      	add	r3, r2
 8000800:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	0a1a      	lsrs	r2, r3, #8
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	3305      	adds	r3, #5
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	4413      	add	r3, r2
 800081a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	0c1a      	lsrs	r2, r3, #16
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	3306      	adds	r3, #6
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	4413      	add	r3, r2
 8000834:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	0e1a      	lsrs	r2, r3, #24
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3307      	adds	r3, #7
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d108      	bne.n	800085c <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	68da      	ldr	r2, [r3, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f042 0220 	orr.w	r2, r2, #32
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	e007      	b.n	800086c <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	691a      	ldr	r2, [r3, #16]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f042 0220 	orr.w	r2, r2, #32
 800086a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800086c:	2300      	movs	r3, #0
 800086e:	e006      	b.n	800087e <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000874:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
  }
}
 800087e:	4618      	mov	r0, r3
 8000880:	371c      	adds	r7, #28
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000898:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d002      	beq.n	80008a6 <HAL_CAN_ActivateNotification+0x1e>
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d109      	bne.n	80008ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6959      	ldr	r1, [r3, #20]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e006      	b.n	80008c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
  }
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b08a      	sub	sp, #40	; 0x28
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	691b      	ldr	r3, [r3, #16]
 8000904:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d07c      	beq.n	8000a12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	2b00      	cmp	r3, #0
 8000920:	d023      	beq.n	800096a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2201      	movs	r2, #1
 8000928:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	2b00      	cmp	r3, #0
 8000932:	d003      	beq.n	800093c <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f000 f97d 	bl	8000c34 <HAL_CAN_TxMailbox0CompleteCallback>
 800093a:	e016      	b.n	800096a <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	2b00      	cmp	r3, #0
 8000944:	d004      	beq.n	8000950 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
 800094e:	e00c      	b.n	800096a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	2b00      	cmp	r3, #0
 8000958:	d004      	beq.n	8000964 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
 8000962:	e002      	b.n	800096a <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f980 	bl	8000c6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000970:	2b00      	cmp	r3, #0
 8000972:	d024      	beq.n	80009be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800097c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000984:	2b00      	cmp	r3, #0
 8000986:	d003      	beq.n	8000990 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f95c 	bl	8000c46 <HAL_CAN_TxMailbox1CompleteCallback>
 800098e:	e016      	b.n	80009be <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000996:	2b00      	cmp	r3, #0
 8000998:	d004      	beq.n	80009a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
 80009a2:	e00c      	b.n	80009be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d004      	beq.n	80009b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
 80009b6:	e002      	b.n	80009be <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 f95f 	bl	8000c7c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d024      	beq.n	8000a12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f93b 	bl	8000c58 <HAL_CAN_TxMailbox2CompleteCallback>
 80009e2:	e016      	b.n	8000a12 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
 80009f6:	e00c      	b.n	8000a12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d004      	beq.n	8000a0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0a:	e002      	b.n	8000a12 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f93e 	bl	8000c8e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00c      	beq.n	8000a36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f003 0310 	and.w	r3, r3, #16
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d007      	beq.n	8000a36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2210      	movs	r2, #16
 8000a34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00b      	beq.n	8000a58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2208      	movs	r2, #8
 8000a50:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 f924 	bl	8000ca0 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d009      	beq.n	8000a76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	f003 0303 	and.w	r3, r3, #3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f001 fbd7 	bl	8002224 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00c      	beq.n	8000a9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	f003 0310 	and.w	r3, r3, #16
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d007      	beq.n	8000a9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2210      	movs	r2, #16
 8000a98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
 8000a9c:	f003 0320 	and.w	r3, r3, #32
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00b      	beq.n	8000abc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f904 	bl	8000cc4 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d009      	beq.n	8000ada <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f8ec 	bl	8000cb2 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00b      	beq.n	8000afc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2210      	movs	r2, #16
 8000af4:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f8ed 	bl	8000cd6 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000afc:	6a3b      	ldr	r3, [r7, #32]
 8000afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00b      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d006      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2208      	movs	r2, #8
 8000b16:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f8e5 	bl	8000ce8 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d075      	beq.n	8000c14 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d06c      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d008      	beq.n	8000b4e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d008      	beq.n	8000b6a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d008      	beq.n	8000b86 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d03d      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d038      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000ba0:	2b30      	cmp	r3, #48	; 0x30
 8000ba2:	d017      	beq.n	8000bd4 <HAL_CAN_IRQHandler+0x302>
 8000ba4:	2b30      	cmp	r3, #48	; 0x30
 8000ba6:	d804      	bhi.n	8000bb2 <HAL_CAN_IRQHandler+0x2e0>
 8000ba8:	2b10      	cmp	r3, #16
 8000baa:	d009      	beq.n	8000bc0 <HAL_CAN_IRQHandler+0x2ee>
 8000bac:	2b20      	cmp	r3, #32
 8000bae:	d00c      	beq.n	8000bca <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000bb0:	e024      	b.n	8000bfc <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000bb2:	2b50      	cmp	r3, #80	; 0x50
 8000bb4:	d018      	beq.n	8000be8 <HAL_CAN_IRQHandler+0x316>
 8000bb6:	2b60      	cmp	r3, #96	; 0x60
 8000bb8:	d01b      	beq.n	8000bf2 <HAL_CAN_IRQHandler+0x320>
 8000bba:	2b40      	cmp	r3, #64	; 0x40
 8000bbc:	d00f      	beq.n	8000bde <HAL_CAN_IRQHandler+0x30c>
            break;
 8000bbe:	e01d      	b.n	8000bfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bc8:	e018      	b.n	8000bfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bd2:	e013      	b.n	8000bfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	f043 0320 	orr.w	r3, r3, #32
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bdc:	e00e      	b.n	8000bfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000be6:	e009      	b.n	8000bfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bf0:	e004      	b.n	8000bfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bfa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	699a      	ldr	r2, [r3, #24]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2204      	movs	r2, #4
 8000c12:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d008      	beq.n	8000c2c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	431a      	orrs	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f867 	bl	8000cfa <HAL_CAN_ErrorCallback>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4906      	ldr	r1, [pc, #24]	; (8000d9c <NVIC_EnableIRQ+0x2c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	da0b      	bge.n	8000dcc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <NVIC_SetPriority+0x4c>)
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 030f 	and.w	r3, r3, #15
 8000dc0:	3b04      	subs	r3, #4
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dca:	e009      	b.n	8000de0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <NVIC_SetPriority+0x50>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e7c:	f7ff ff90 	bl	8000da0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff31 	bl	8000d0c <NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff46 	bl	8000d54 <NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff90 	bl	8000df4 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5f 	bl	8000da0 <NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff39 	bl	8000d70 <NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b08b      	sub	sp, #44	; 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	e127      	b.n	8001194 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000f44:	2201      	movs	r2, #1
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f040 8116 	bne.w	800118e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d034      	beq.n	8000fd4 <HAL_GPIO_Init+0xb4>
 8000f6a:	2b12      	cmp	r3, #18
 8000f6c:	d80d      	bhi.n	8000f8a <HAL_GPIO_Init+0x6a>
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d02b      	beq.n	8000fca <HAL_GPIO_Init+0xaa>
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d804      	bhi.n	8000f80 <HAL_GPIO_Init+0x60>
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d031      	beq.n	8000fde <HAL_GPIO_Init+0xbe>
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d01c      	beq.n	8000fb8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f7e:	e048      	b.n	8001012 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d043      	beq.n	800100c <HAL_GPIO_Init+0xec>
 8000f84:	2b11      	cmp	r3, #17
 8000f86:	d01b      	beq.n	8000fc0 <HAL_GPIO_Init+0xa0>
          break;
 8000f88:	e043      	b.n	8001012 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000f8a:	4a87      	ldr	r2, [pc, #540]	; (80011a8 <HAL_GPIO_Init+0x288>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d026      	beq.n	8000fde <HAL_GPIO_Init+0xbe>
 8000f90:	4a85      	ldr	r2, [pc, #532]	; (80011a8 <HAL_GPIO_Init+0x288>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d806      	bhi.n	8000fa4 <HAL_GPIO_Init+0x84>
 8000f96:	4a85      	ldr	r2, [pc, #532]	; (80011ac <HAL_GPIO_Init+0x28c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d020      	beq.n	8000fde <HAL_GPIO_Init+0xbe>
 8000f9c:	4a84      	ldr	r2, [pc, #528]	; (80011b0 <HAL_GPIO_Init+0x290>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d01d      	beq.n	8000fde <HAL_GPIO_Init+0xbe>
          break;
 8000fa2:	e036      	b.n	8001012 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000fa4:	4a83      	ldr	r2, [pc, #524]	; (80011b4 <HAL_GPIO_Init+0x294>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d019      	beq.n	8000fde <HAL_GPIO_Init+0xbe>
 8000faa:	4a83      	ldr	r2, [pc, #524]	; (80011b8 <HAL_GPIO_Init+0x298>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d016      	beq.n	8000fde <HAL_GPIO_Init+0xbe>
 8000fb0:	4a82      	ldr	r2, [pc, #520]	; (80011bc <HAL_GPIO_Init+0x29c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d013      	beq.n	8000fde <HAL_GPIO_Init+0xbe>
          break;
 8000fb6:	e02c      	b.n	8001012 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	623b      	str	r3, [r7, #32]
          break;
 8000fbe:	e028      	b.n	8001012 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	623b      	str	r3, [r7, #32]
          break;
 8000fc8:	e023      	b.n	8001012 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	3308      	adds	r3, #8
 8000fd0:	623b      	str	r3, [r7, #32]
          break;
 8000fd2:	e01e      	b.n	8001012 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	330c      	adds	r3, #12
 8000fda:	623b      	str	r3, [r7, #32]
          break;
 8000fdc:	e019      	b.n	8001012 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	623b      	str	r3, [r7, #32]
          break;
 8000fea:	e012      	b.n	8001012 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d105      	bne.n	8001000 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	611a      	str	r2, [r3, #16]
          break;
 8000ffe:	e008      	b.n	8001012 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001000:	2308      	movs	r3, #8
 8001002:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	615a      	str	r2, [r3, #20]
          break;
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
          break;
 8001010:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2bff      	cmp	r3, #255	; 0xff
 8001016:	d801      	bhi.n	800101c <HAL_GPIO_Init+0xfc>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	e001      	b.n	8001020 <HAL_GPIO_Init+0x100>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3304      	adds	r3, #4
 8001020:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	2bff      	cmp	r3, #255	; 0xff
 8001026:	d802      	bhi.n	800102e <HAL_GPIO_Init+0x10e>
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x114>
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	3b08      	subs	r3, #8
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	210f      	movs	r1, #15
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	401a      	ands	r2, r3
 8001046:	6a39      	ldr	r1, [r7, #32]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	431a      	orrs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 8096 	beq.w	800118e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001062:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	4a56      	ldr	r2, [pc, #344]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6193      	str	r3, [r2, #24]
 800106e:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800107a:	4a52      	ldr	r2, [pc, #328]	; (80011c4 <HAL_GPIO_Init+0x2a4>)
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	4013      	ands	r3, r2
 800109c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a49      	ldr	r2, [pc, #292]	; (80011c8 <HAL_GPIO_Init+0x2a8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x1ae>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a48      	ldr	r2, [pc, #288]	; (80011cc <HAL_GPIO_Init+0x2ac>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x1aa>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a47      	ldr	r2, [pc, #284]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x1a6>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a46      	ldr	r2, [pc, #280]	; (80011d4 <HAL_GPIO_Init+0x2b4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x1a2>
 80010be:	2303      	movs	r3, #3
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x1b0>
 80010c2:	2304      	movs	r3, #4
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x1b0>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x1b0>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x1b0>
 80010ce:	2300      	movs	r3, #0
 80010d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4313      	orrs	r3, r2
 80010de:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80010e0:	4938      	ldr	r1, [pc, #224]	; (80011c4 <HAL_GPIO_Init+0x2a4>)
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4936      	ldr	r1, [pc, #216]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
 8001106:	e006      	b.n	8001116 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001108:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	43db      	mvns	r3, r3
 8001110:	4931      	ldr	r1, [pc, #196]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 8001112:	4013      	ands	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	492c      	ldr	r1, [pc, #176]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	604b      	str	r3, [r1, #4]
 800112e:	e006      	b.n	800113e <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	43db      	mvns	r3, r3
 8001138:	4927      	ldr	r1, [pc, #156]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 800113a:	4013      	ands	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	4922      	ldr	r1, [pc, #136]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	608b      	str	r3, [r1, #8]
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	43db      	mvns	r3, r3
 8001160:	491d      	ldr	r1, [pc, #116]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 8001162:	4013      	ands	r3, r2
 8001164:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	4918      	ldr	r1, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	60cb      	str	r3, [r1, #12]
 800117e:	e006      	b.n	800118e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	43db      	mvns	r3, r3
 8001188:	4913      	ldr	r1, [pc, #76]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 800118a:	4013      	ands	r3, r2
 800118c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	3301      	adds	r3, #1
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	2b0f      	cmp	r3, #15
 8001198:	f67f aed4 	bls.w	8000f44 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800119c:	bf00      	nop
 800119e:	372c      	adds	r7, #44	; 0x2c
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	10210000 	.word	0x10210000
 80011ac:	10110000 	.word	0x10110000
 80011b0:	10120000 	.word	0x10120000
 80011b4:	10310000 	.word	0x10310000
 80011b8:	10320000 	.word	0x10320000
 80011bc:	10220000 	.word	0x10220000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40011400 	.word	0x40011400
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	611a      	str	r2, [r3, #16]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 8087 	beq.w	8001334 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001226:	4b92      	ldr	r3, [pc, #584]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b04      	cmp	r3, #4
 8001230:	d00c      	beq.n	800124c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001232:	4b8f      	ldr	r3, [pc, #572]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b08      	cmp	r3, #8
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x58>
 800123e:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124a:	d10b      	bne.n	8001264 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b88      	ldr	r3, [pc, #544]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d06c      	beq.n	8001332 <HAL_RCC_OscConfig+0x126>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d168      	bne.n	8001332 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e22d      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d106      	bne.n	800127c <HAL_RCC_OscConfig+0x70>
 800126e:	4b80      	ldr	r3, [pc, #512]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a7f      	ldr	r2, [pc, #508]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e02e      	b.n	80012da <HAL_RCC_OscConfig+0xce>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10c      	bne.n	800129e <HAL_RCC_OscConfig+0x92>
 8001284:	4b7a      	ldr	r3, [pc, #488]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a79      	ldr	r2, [pc, #484]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 800128a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b77      	ldr	r3, [pc, #476]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a76      	ldr	r2, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e01d      	b.n	80012da <HAL_RCC_OscConfig+0xce>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0xb6>
 80012a8:	4b71      	ldr	r3, [pc, #452]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a70      	ldr	r2, [pc, #448]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80012ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a6d      	ldr	r2, [pc, #436]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80012ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	e00b      	b.n	80012da <HAL_RCC_OscConfig+0xce>
 80012c2:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6a      	ldr	r2, [pc, #424]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80012c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b68      	ldr	r3, [pc, #416]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a67      	ldr	r2, [pc, #412]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80012d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d013      	beq.n	800130a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7fe ff8b 	bl	80001fc <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ea:	f7fe ff87 	bl	80001fc <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b64      	cmp	r3, #100	; 0x64
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e1e1      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fc:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0xde>
 8001308:	e014      	b.n	8001334 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7fe ff77 	bl	80001fc <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001312:	f7fe ff73 	bl	80001fc <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1cd      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001324:	4b52      	ldr	r3, [pc, #328]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x106>
 8001330:	e000      	b.n	8001334 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001332:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d063      	beq.n	8001408 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001340:	4b4b      	ldr	r3, [pc, #300]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00b      	beq.n	8001364 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800134c:	4b48      	ldr	r3, [pc, #288]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b08      	cmp	r3, #8
 8001356:	d11c      	bne.n	8001392 <HAL_RCC_OscConfig+0x186>
 8001358:	4b45      	ldr	r3, [pc, #276]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d116      	bne.n	8001392 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001364:	4b42      	ldr	r3, [pc, #264]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_OscConfig+0x170>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d001      	beq.n	800137c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e1a1      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4939      	ldr	r1, [pc, #228]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001390:	e03a      	b.n	8001408 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d020      	beq.n	80013dc <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <HAL_RCC_OscConfig+0x268>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7fe ff2c 	bl	80001fc <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a8:	f7fe ff28 	bl	80001fc <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e182      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4926      	ldr	r1, [pc, #152]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
 80013da:	e015      	b.n	8001408 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_RCC_OscConfig+0x268>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7fe ff0b 	bl	80001fc <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7fe ff07 	bl	80001fc <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e161      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d039      	beq.n	8001488 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d019      	beq.n	8001450 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7fe feeb 	bl	80001fc <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142a:	f7fe fee7 	bl	80001fc <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e141      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_RCC_OscConfig+0x264>)
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001448:	2001      	movs	r0, #1
 800144a:	f000 fab1 	bl	80019b0 <RCC_Delay>
 800144e:	e01b      	b.n	8001488 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7fe fed1 	bl	80001fc <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	e00e      	b.n	800147c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7fe fecd 	bl	80001fc <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d907      	bls.n	800147c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e127      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
 8001470:	40021000 	.word	0x40021000
 8001474:	42420000 	.word	0x42420000
 8001478:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b92      	ldr	r3, [pc, #584]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ea      	bne.n	800145e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80a6 	beq.w	80015e2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b8b      	ldr	r3, [pc, #556]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a87      	ldr	r2, [pc, #540]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014be:	2301      	movs	r3, #1
 80014c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c2:	4b82      	ldr	r3, [pc, #520]	; (80016cc <HAL_RCC_OscConfig+0x4c0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ce:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <HAL_RCC_OscConfig+0x4c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a7e      	ldr	r2, [pc, #504]	; (80016cc <HAL_RCC_OscConfig+0x4c0>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014da:	f7fe fe8f 	bl	80001fc <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e2:	f7fe fe8b 	bl	80001fc <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	; 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0e5      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	4b75      	ldr	r3, [pc, #468]	; (80016cc <HAL_RCC_OscConfig+0x4c0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x30a>
 8001508:	4b6f      	ldr	r3, [pc, #444]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a6e      	ldr	r2, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	e02d      	b.n	8001572 <HAL_RCC_OscConfig+0x366>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x32c>
 800151e:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a69      	ldr	r2, [pc, #420]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	6213      	str	r3, [r2, #32]
 800152a:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a66      	ldr	r2, [pc, #408]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001530:	f023 0304 	bic.w	r3, r3, #4
 8001534:	6213      	str	r3, [r2, #32]
 8001536:	e01c      	b.n	8001572 <HAL_RCC_OscConfig+0x366>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d10c      	bne.n	800155a <HAL_RCC_OscConfig+0x34e>
 8001540:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a60      	ldr	r2, [pc, #384]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6213      	str	r3, [r2, #32]
 800154c:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4a5d      	ldr	r2, [pc, #372]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6213      	str	r3, [r2, #32]
 8001558:	e00b      	b.n	8001572 <HAL_RCC_OscConfig+0x366>
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a5a      	ldr	r2, [pc, #360]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6213      	str	r3, [r2, #32]
 8001566:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4a57      	ldr	r2, [pc, #348]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d015      	beq.n	80015a6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157a:	f7fe fe3f 	bl	80001fc <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7fe fe3b 	bl	80001fc <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e093      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ee      	beq.n	8001582 <HAL_RCC_OscConfig+0x376>
 80015a4:	e014      	b.n	80015d0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7fe fe29 	bl	80001fc <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	e00a      	b.n	80015c4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7fe fe25 	bl	80001fc <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e07d      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ee      	bne.n	80015ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d105      	bne.n	80015e2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d6:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a3b      	ldr	r2, [pc, #236]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 80015dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d069      	beq.n	80016be <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d061      	beq.n	80016ba <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d146      	bne.n	800168c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7fe fdfa 	bl	80001fc <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160c:	f7fe fdf6 	bl	80001fc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e050      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001632:	d108      	bne.n	8001646 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	4921      	ldr	r1, [pc, #132]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a19      	ldr	r1, [r3, #32]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	430b      	orrs	r3, r1
 8001658:	491b      	ldr	r1, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7fe fdca 	bl	80001fc <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7fe fdc6 	bl	80001fc <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e020      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x460>
 800168a:	e018      	b.n	80016be <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7fe fdb3 	bl	80001fc <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7fe fdaf 	bl	80001fc <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e009      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_RCC_OscConfig+0x4bc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x48e>
 80016b8:	e001      	b.n	80016be <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40007000 	.word	0x40007000
 80016d0:	42420060 	.word	0x42420060

080016d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016e2:	4b7e      	ldr	r3, [pc, #504]	; (80018dc <HAL_RCC_ClockConfig+0x208>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d910      	bls.n	8001712 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f0:	4b7a      	ldr	r3, [pc, #488]	; (80018dc <HAL_RCC_ClockConfig+0x208>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 0207 	bic.w	r2, r3, #7
 80016f8:	4978      	ldr	r1, [pc, #480]	; (80018dc <HAL_RCC_ClockConfig+0x208>)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001700:	4b76      	ldr	r3, [pc, #472]	; (80018dc <HAL_RCC_ClockConfig+0x208>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d001      	beq.n	8001712 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0e0      	b.n	80018d4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d020      	beq.n	8001760 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800172a:	4b6d      	ldr	r3, [pc, #436]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a6c      	ldr	r2, [pc, #432]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 8001730:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001734:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001742:	4b67      	ldr	r3, [pc, #412]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4a66      	ldr	r2, [pc, #408]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 8001748:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800174c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174e:	4b64      	ldr	r3, [pc, #400]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	4961      	ldr	r1, [pc, #388]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d06a      	beq.n	8001842 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d107      	bne.n	8001784 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001774:	4b5a      	ldr	r3, [pc, #360]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d115      	bne.n	80017ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0a7      	b.n	80018d4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d107      	bne.n	800179c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178c:	4b54      	ldr	r3, [pc, #336]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e09b      	b.n	80018d4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e093      	b.n	80018d4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ac:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 0203 	bic.w	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4949      	ldr	r1, [pc, #292]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017be:	f7fe fd1d 	bl	80001fc <HAL_GetTick>
 80017c2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d112      	bne.n	80017f2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ce:	f7fe fd15 	bl	80001fc <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e077      	b.n	80018d4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e4:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d1ee      	bne.n	80017ce <HAL_RCC_ClockConfig+0xfa>
 80017f0:	e027      	b.n	8001842 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d11d      	bne.n	8001836 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fc:	f7fe fcfe 	bl	80001fc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	; 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e060      	b.n	80018d4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d1ee      	bne.n	80017fc <HAL_RCC_ClockConfig+0x128>
 800181e:	e010      	b.n	8001842 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7fe fcec 	bl	80001fc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04e      	b.n	80018d4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1ee      	bne.n	8001820 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_RCC_ClockConfig+0x208>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d210      	bcs.n	8001872 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_ClockConfig+0x208>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 0207 	bic.w	r2, r3, #7
 8001858:	4920      	ldr	r1, [pc, #128]	; (80018dc <HAL_RCC_ClockConfig+0x208>)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_ClockConfig+0x208>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d001      	beq.n	8001872 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e030      	b.n	80018d4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	4915      	ldr	r1, [pc, #84]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d009      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	490d      	ldr	r1, [pc, #52]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b0:	f000 f81c 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018b4:	4601      	mov	r1, r0
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <HAL_RCC_ClockConfig+0x210>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	fa21 f303 	lsr.w	r3, r1, r3
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_RCC_ClockConfig+0x214>)
 80018ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7fe fc53 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40022000 	.word	0x40022000
 80018e0:	40021000 	.word	0x40021000
 80018e4:	08002544 	.word	0x08002544
 80018e8:	20000008 	.word	0x20000008

080018ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	b490      	push	{r4, r7}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018f4:	1d3c      	adds	r4, r7, #4
 80018f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001916:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x40>
 8001926:	2b08      	cmp	r3, #8
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x46>
 800192a:	e02d      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800192e:	623b      	str	r3, [r7, #32]
      break;
 8001930:	e02d      	b.n	800198e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	0c9b      	lsrs	r3, r3, #18
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800193e:	4413      	add	r3, r2
 8001940:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001944:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	0c5b      	lsrs	r3, r3, #17
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800195e:	4413      	add	r3, r2
 8001960:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001964:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800196a:	fb02 f203 	mul.w	r2, r2, r3
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
 8001976:	e004      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	623b      	str	r3, [r7, #32]
      break;
 8001986:	e002      	b.n	800198e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800198a:	623b      	str	r3, [r7, #32]
      break;
 800198c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198e:	6a3b      	ldr	r3, [r7, #32]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bc90      	pop	{r4, r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	08002530 	.word	0x08002530
 80019a0:	08002540 	.word	0x08002540
 80019a4:	40021000 	.word	0x40021000
 80019a8:	007a1200 	.word	0x007a1200
 80019ac:	003d0900 	.word	0x003d0900

080019b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <RCC_Delay+0x34>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <RCC_Delay+0x38>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0a5b      	lsrs	r3, r3, #9
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80019cc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	60fa      	str	r2, [r7, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f9      	bne.n	80019cc <RCC_Delay+0x1c>
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008
 80019e8:	10624dd3 	.word	0x10624dd3

080019ec <_ZN8CanClassC1Ev>:
 *      Author: ryu
 */
#include "stm32f1xx_hal.h"
#include "CanClass.hpp"

CanClass::CanClass()
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	675a      	str	r2, [r3, #116]	; 0x74
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	679a      	str	r2, [r3, #120]	; 0x78
{
}
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <_ZN8CanClass4initEv>:

void CanClass::init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
    // default to 125 kbit/s
    prescaler = 48;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2230      	movs	r2, #48	; 0x30
 8001a20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hcan.Instance = CAN1;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_ZN8CanClass4initEv+0x5c>)
 8001a28:	601a      	str	r2, [r3, #0]
    bus_state = OFF_BUS;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

	tx_header.RTR = CAN_RTR_DATA;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34
	tx_header.IDE = CAN_ID_STD;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
	tx_header.StdId = 0xfff;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
	tx_header.ExtId = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c
	tx_header.DLC = 8;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2208      	movs	r2, #8
 8001a50:	639a      	str	r2, [r3, #56]	; 0x38

	can_set_bitrate(CAN_BITRATE_500K);
 8001a52:	2106      	movs	r1, #6
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f8d5 	bl	8001c04 <_ZN8CanClass15can_set_bitrateE11can_bitrate>
	can_set_silent(0);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f929 	bl	8001cb4 <_ZN8CanClass14can_set_silentEh>
	can_enable();
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f86a 	bl	8001b3c <_ZN8CanClass10can_enableEv>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40006400 	.word	0x40006400

08001a74 <_ZN8CanClass14can_set_filterEmm>:

void CanClass::can_set_filter(uint32_t id, uint32_t mask)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
    // see page 825 of RM0091 for details on filters
    // set the standard ID part
    filter.FilterIdHigh = (id & 0x7FF) << 5;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	015b      	lsls	r3, r3, #5
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	67da      	str	r2, [r3, #124]	; 0x7c
    // add the top 5 bits of the extended ID
    filter.FilterIdHigh += (id >> 24) & 0xFFFF;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	0e1b      	lsrs	r3, r3, #24
 8001a92:	441a      	add	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	67da      	str	r2, [r3, #124]	; 0x7c
    // set the low part to the remaining extended ID bits
    filter.FilterIdLow += ((id & 0x1FFFF800) << 3);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001aa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aaa:	441a      	add	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    // set the standard ID part
    filter.FilterMaskIdHigh = (mask & 0x7FF) << 5;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	015b      	lsls	r3, r3, #5
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    // add the top 5 bits of the extended ID
    filter.FilterMaskIdHigh += (mask >> 24) & 0xFFFF;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0e1b      	lsrs	r3, r3, #24
 8001ac8:	441a      	add	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    // set the low part to the remaining extended ID bits
    filter.FilterMaskIdLow += ((mask & 0x1FFFF800) << 3);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ade:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae2:	441a      	add	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    filter.FilterBank = 0;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    filter.SlaveStartFilterBank = 0;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    filter.FilterActivation = ENABLE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    if (bus_state == ON_BUS)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d106      	bne.n	8001b32 <_ZN8CanClass14can_set_filterEmm+0xbe>
    {
        HAL_CAN_ConfigFilter(&hcan, &filter);
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	337c      	adds	r3, #124	; 0x7c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	f7fe fc8c 	bl	800044a <HAL_CAN_ConfigFilter>
    }
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <_ZN8CanClass10can_enableEv>:

void CanClass::can_enable(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
    if (bus_state == OFF_BUS)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d150      	bne.n	8001bf0 <_ZN8CanClass10can_enableEv+0xb4>
    {
        hcan.Init.Prescaler = prescaler;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]
        hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
        hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
        hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b6a:	611a      	str	r2, [r3, #16]
        hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b72:	615a      	str	r2, [r3, #20]
        hcan.Init.TimeTriggeredMode = DISABLE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	761a      	strb	r2, [r3, #24]
        hcan.Init.AutoBusOff = DISABLE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	765a      	strb	r2, [r3, #25]
        hcan.Init.AutoWakeUp = DISABLE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	769a      	strb	r2, [r3, #26]
        hcan.Init.AutoRetransmission = ENABLE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	76da      	strb	r2, [r3, #27]
        hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	771a      	strb	r2, [r3, #28]
        hcan.Init.TransmitFifoPriority = DISABLE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	775a      	strb	r2, [r3, #29]
        //hcan.pTxMsg = NULL;
        HAL_CAN_Init(&hcan);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fb5a 	bl	8000254 <HAL_CAN_Init>
        bus_state = ON_BUS;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        can_set_filter(0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff61 	bl	8001a74 <_ZN8CanClass14can_set_filterEmm>



        /* Start the CAN peripheral */
        if (HAL_CAN_Start(&hcan) != HAL_OK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fd11 	bl	80005dc <HAL_CAN_Start>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <_ZN8CanClass10can_enableEv+0x94>
        {
          /* Start Error */
          Error_Handler();
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8d4 	bl	8001d78 <_ZN8CanClass13Error_HandlerEv>
        }

        /* Activate CAN RX notification */
        if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fe57 	bl	8000888 <HAL_CAN_ActivateNotification>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <_ZN8CanClass10can_enableEv+0xb4>
        {
          /* Notification Error */
          Error_Handler();
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8c4 	bl	8001d78 <_ZN8CanClass13Error_HandlerEv>
        }
    }

    GPIOB->BSRR = GPIO_BSRR_BS0;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <_ZN8CanClass10can_enableEv+0xc4>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	611a      	str	r2, [r3, #16]
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40010c00 	.word	0x40010c00

08001c04 <_ZN8CanClass15can_set_bitrateE11can_bitrate>:
    GPIOB->BSRR = GPIO_BSRR_BR0;
    GPIOA->BSRR = GPIO_BSRR_BR11;
}

void CanClass::can_set_bitrate(enum can_bitrate bitrate)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
    if (bus_state == ON_BUS)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d047      	beq.n	8001caa <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa6>
    {
        // cannot set bitrate while on bus
        return;
    }

    switch (bitrate)
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d845      	bhi.n	8001cac <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
 8001c20:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <_ZN8CanClass15can_set_bitrateE11can_bitrate+0x24>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c4d 	.word	0x08001c4d
 8001c2c:	08001c59 	.word	0x08001c59
 8001c30:	08001c63 	.word	0x08001c63
 8001c34:	08001c6d 	.word	0x08001c6d
 8001c38:	08001c77 	.word	0x08001c77
 8001c3c:	08001c81 	.word	0x08001c81
 8001c40:	08001c8b 	.word	0x08001c8b
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001c9f 	.word	0x08001c9f
    {
        case CAN_BITRATE_10K:
            prescaler = 450;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001c52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001c56:	e029      	b.n	8001cac <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_20K:
            prescaler = 225;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	22e1      	movs	r2, #225	; 0xe1
 8001c5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001c60:	e024      	b.n	8001cac <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_50K:
            prescaler = 90;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	225a      	movs	r2, #90	; 0x5a
 8001c66:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001c6a:	e01f      	b.n	8001cac <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_100K:
            prescaler = 45;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	222d      	movs	r2, #45	; 0x2d
 8001c70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001c74:	e01a      	b.n	8001cac <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_125K:
            prescaler = 36;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2224      	movs	r2, #36	; 0x24
 8001c7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001c7e:	e015      	b.n	8001cac <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_250K:
            prescaler = 18;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2212      	movs	r2, #18
 8001c84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001c88:	e010      	b.n	8001cac <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_500K:
            prescaler = 9;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2209      	movs	r2, #9
 8001c8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001c92:	e00b      	b.n	8001cac <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_750K:
            prescaler = 6;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2206      	movs	r2, #6
 8001c98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001c9c:	e006      	b.n	8001cac <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        case CAN_BITRATE_1000K:
            prescaler = 4;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            break;
 8001ca6:	bf00      	nop
 8001ca8:	e000      	b.n	8001cac <_ZN8CanClass15can_set_bitrateE11can_bitrate+0xa8>
        return;
 8001caa:	bf00      	nop
    }
}
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <_ZN8CanClass14can_set_silentEh>:

void CanClass::can_set_silent(uint8_t silent)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
    if (bus_state == ON_BUS)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d00b      	beq.n	8001ce2 <_ZN8CanClass14can_set_silentEh+0x2e>
    {
        // cannot set silent mode while on bus
        return;
    }
    if (silent)
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <_ZN8CanClass14can_set_silentEh+0x26>
    {
        hcan.Init.Mode = CAN_MODE_SILENT;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	e004      	b.n	8001ce4 <_ZN8CanClass14can_set_silentEh+0x30>
    }
    else
    {
        hcan.Init.Mode = CAN_MODE_NORMAL;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e000      	b.n	8001ce4 <_ZN8CanClass14can_set_silentEh+0x30>
        return;
 8001ce2:	bf00      	nop
    }
}
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <_ZN8CanClass6can_rxEP19CAN_RxHeaderTypeDefRA8_h>:
    //led_on();
    return status;
}

uint32_t CanClass::can_rx(CAN_RxHeaderTypeDef *rx_header, uint8_t (&buf)[CAN_MTU])
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
    uint32_t status;

    status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, rx_header, buf);
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	2100      	movs	r1, #0
 8001d00:	f7fe fcb0 	bl	8000664 <HAL_CAN_GetRxMessage>
 8001d04:	4603      	mov	r3, r0
 8001d06:	617b      	str	r3, [r7, #20]

    //led_on(); later
    return status;
 8001d08:	697b      	ldr	r3, [r7, #20]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_ZN8CanClass5enditEv>:
        return 0;
    }
    return (HAL_CAN_GetRxFifoFillLevel(&hcan, fifo) > 0);
}

void CanClass::endit(){
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
	rx_flag = 0;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	led_on();
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f804 	bl	8001d30 <_ZN8CanClass6led_onEv>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZN8CanClass6led_onEv>:

// Attempt to turn on status LED
void CanClass::led_on(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	// Make sure the LED has been off for at least LED_DURATION before turning on again
	// This prevents a solid status LED on a busy canbus
	if(led_laston == 0 && HAL_GetTick() - led_lastoff > LED_DURATION)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <_ZN8CanClass6led_onEv+0x24>
 8001d40:	f7fe fa5c 	bl	80001fc <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b0a      	cmp	r3, #10
 8001d4e:	d901      	bls.n	8001d54 <_ZN8CanClass6led_onEv+0x24>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <_ZN8CanClass6led_onEv+0x26>
 8001d54:	2300      	movs	r3, #0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <_ZN8CanClass6led_onEv+0x3c>
	{
	    GPIOA->BSRR = GPIO_BSRR_BS11;
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <_ZN8CanClass6led_onEv+0x44>)
 8001d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d60:	611a      	str	r2, [r3, #16]
		led_laston = HAL_GetTick();
 8001d62:	f7fe fa4b 	bl	80001fc <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	675a      	str	r2, [r3, #116]	; 0x74
	}
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40010800 	.word	0x40010800

08001d78 <_ZN8CanClass13Error_HandlerEv>:
		led_laston = 0;
		led_lastoff = HAL_GetTick();
	}
}

void CanClass::Error_Handler(void){
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d8e:	f7fe f9dd 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d92:	f000 f807 	bl	8001da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d96:	f000 f87f 	bl	8001e98 <MX_GPIO_Init>
  MX_CAN_Init();
 8001d9a:	f000 f849 	bl	8001e30 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  main_cpp();
 8001d9e:	f000 fa13 	bl	80021c8 <main_cpp>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
 8001da2:	e7fe      	b.n	8001da2 <main+0x18>

08001da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b090      	sub	sp, #64	; 0x40
 8001da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001daa:	f107 0318 	add.w	r3, r7, #24
 8001dae:	2228      	movs	r2, #40	; 0x28
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fba8 	bl	8002508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001de2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de8:	f107 0318 	add.w	r3, r7, #24
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fa0d 	bl	800120c <HAL_RCC_OscConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001df8:	f000 f8de 	bl	8001fb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e00:	2302      	movs	r3, #2
 8001e02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2102      	movs	r1, #2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fc5c 	bl	80016d4 <HAL_RCC_ClockConfig>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e22:	f000 f8c9 	bl	8001fb8 <Error_Handler>
  }
}
 8001e26:	bf00      	nop
 8001e28:	3740      	adds	r7, #64	; 0x40
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <MX_CAN_Init+0x64>)
 8001e38:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_CAN_Init+0x60>)
 8001e7e:	f7fe f9e9 	bl	8000254 <HAL_CAN_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001e88:	f000 f896 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200000dc 	.word	0x200000dc
 8001e94:	40006400 	.word	0x40006400

08001e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eac:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a3d      	ldr	r2, [pc, #244]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a37      	ldr	r2, [pc, #220]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001eca:	f043 0320 	orr.w	r3, r3, #32
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a31      	ldr	r2, [pc, #196]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <MX_GPIO_Init+0x110>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f12:	4826      	ldr	r0, [pc, #152]	; (8001fac <MX_GPIO_Init+0x114>)
 8001f14:	f7ff f962 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8 
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f641 712c 	movw	r1, #7980	; 0x1f2c
 8001f1e:	4824      	ldr	r0, [pc, #144]	; (8001fb0 <MX_GPIO_Init+0x118>)
 8001f20:	f7ff f95c 	bl	80011dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001f24:	2200      	movs	r2, #0
 8001f26:	213f      	movs	r1, #63	; 0x3f
 8001f28:	4822      	ldr	r0, [pc, #136]	; (8001fb4 <MX_GPIO_Init+0x11c>)
 8001f2a:	f7ff f957 	bl	80011dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4619      	mov	r1, r3
 8001f46:	4819      	ldr	r0, [pc, #100]	; (8001fac <MX_GPIO_Init+0x114>)
 8001f48:	f7fe ffea 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4812      	ldr	r0, [pc, #72]	; (8001fac <MX_GPIO_Init+0x114>)
 8001f62:	f7fe ffdd 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA5 PA8 
                           PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8 
 8001f66:	f641 732c 	movw	r3, #7980	; 0x1f2c
 8001f6a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <MX_GPIO_Init+0x118>)
 8001f80:	f7fe ffce 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001f84:	233f      	movs	r3, #63	; 0x3f
 8001f86:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <MX_GPIO_Init+0x11c>)
 8001f9c:	f7fe ffc0 	bl	8000f20 <HAL_GPIO_Init>

}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40011000 	.word	0x40011000
 8001fb0:	40010800 	.word	0x40010800
 8001fb4:	40010c00 	.word	0x40010c00

08001fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_MspInit+0x5c>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <HAL_MspInit+0x5c>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6193      	str	r3, [r2, #24]
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_MspInit+0x5c>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_MspInit+0x5c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_MspInit+0x5c>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_MspInit+0x5c>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_MspInit+0x60>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_MspInit+0x60>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000

08002028 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a29      	ldr	r2, [pc, #164]	; (80020e8 <HAL_CAN_MspInit+0xc0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d14b      	bne.n	80020e0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002048:	4b28      	ldr	r3, [pc, #160]	; (80020ec <HAL_CAN_MspInit+0xc4>)
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	4a27      	ldr	r2, [pc, #156]	; (80020ec <HAL_CAN_MspInit+0xc4>)
 800204e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002052:	61d3      	str	r3, [r2, #28]
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_CAN_MspInit+0xc4>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_CAN_MspInit+0xc4>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a21      	ldr	r2, [pc, #132]	; (80020ec <HAL_CAN_MspInit+0xc4>)
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_CAN_MspInit+0xc4>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	4818      	ldr	r0, [pc, #96]	; (80020f0 <HAL_CAN_MspInit+0xc8>)
 800208e:	f7fe ff47 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4812      	ldr	r0, [pc, #72]	; (80020f0 <HAL_CAN_MspInit+0xc8>)
 80020a8:	f7fe ff3a 	bl	8000f20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_CAN_MspInit+0xcc>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_CAN_MspInit+0xcc>)
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	2014      	movs	r0, #20
 80020d6:	f7fe feec 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80020da:	2014      	movs	r0, #20
 80020dc:	f7fe ff05 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80020e0:	bf00      	nop
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40006400 	.word	0x40006400
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010c00 	.word	0x40010c00
 80020f4:	40010000 	.word	0x40010000

080020f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <HardFault_Handler+0x4>

0800210a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <MemManage_Handler+0x4>

08002110 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <BusFault_Handler+0x4>

08002116 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <UsageFault_Handler+0x4>

0800211c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002144:	f7fe f848 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002152:	f7fe fbbe 	bl	80008d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200000dc 	.word	0x200000dc

08002160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <SystemInit+0x5c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <SystemInit+0x5c>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <SystemInit+0x5c>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4911      	ldr	r1, [pc, #68]	; (80021bc <SystemInit+0x5c>)
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <SystemInit+0x60>)
 8002178:	4013      	ands	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <SystemInit+0x5c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <SystemInit+0x5c>)
 8002182:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <SystemInit+0x5c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <SystemInit+0x5c>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <SystemInit+0x5c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a07      	ldr	r2, [pc, #28]	; (80021bc <SystemInit+0x5c>)
 800219e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80021a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <SystemInit+0x5c>)
 80021a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80021aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SystemInit+0x64>)
 80021ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40021000 	.word	0x40021000
 80021c0:	f8ff0000 	.word	0xf8ff0000
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <main_cpp>:
#include "wrapper.hpp"
#include "CanClass.hpp"
uint8_t cmd;

CanClass can;
void main_cpp(void) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	can.init();
 80021cc:	4812      	ldr	r0, [pc, #72]	; (8002218 <main_cpp+0x50>)
 80021ce:	f7ff fc21 	bl	8001a14 <_ZN8CanClass4initEv>

	GPIOB->BSRR = GPIO_BSRR_BS0;//green
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <main_cpp+0x54>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS1;//yellow
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <main_cpp+0x54>)
 80021da:	2202      	movs	r2, #2
 80021dc:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BS2;//red
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <main_cpp+0x54>)
 80021e0:	2204      	movs	r2, #4
 80021e2:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = GPIO_BSRR_BS11;//led_can
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <main_cpp+0x58>)
 80021e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ea:	611a      	str	r2, [r3, #16]

	HAL_Delay(2000);
 80021ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021f0:	f7fe f80e 	bl	8000210 <HAL_Delay>

	GPIOB->BSRR = GPIO_BSRR_BR0;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <main_cpp+0x54>)
 80021f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021fa:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BR1;
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <main_cpp+0x54>)
 80021fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002202:	611a      	str	r2, [r3, #16]
	GPIOB->BSRR = GPIO_BSRR_BR2;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <main_cpp+0x54>)
 8002206:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800220a:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = GPIO_BSRR_BR11;
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <main_cpp+0x58>)
 800220e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002212:	611a      	str	r2, [r3, #16]

    while(1){
 8002214:	e7fe      	b.n	8002214 <main_cpp+0x4c>
 8002216:	bf00      	nop
 8002218:	2000002c 	.word	0x2000002c
 800221c:	40010c00 	.word	0x40010c00
 8002220:	40010800 	.word	0x40010800

08002224 <HAL_CAN_RxFifo0MsgPendingCallback>:
    }

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	can.receive(cmd, 0x4e2);
 800222c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8002230:	4954      	ldr	r1, [pc, #336]	; (8002384 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8002232:	4855      	ldr	r0, [pc, #340]	; (8002388 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8002234:	f000 f8ae 	bl	8002394 <_ZN8CanClass7receiveIhEEvRT_m>

	int i = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
	while(i < 8)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b07      	cmp	r3, #7
 8002240:	f300 8094 	bgt.w	800236c <HAL_CAN_RxFifo0MsgPendingCallback+0x148>
	{
		if((cmd& 0x01) != 0x00)
 8002244:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d03a      	beq.n	80022c6 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
		{
			switch(i)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b07      	cmp	r3, #7
 8002254:	d876      	bhi.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	0800227d 	.word	0x0800227d
 8002260:	08002287 	.word	0x08002287
 8002264:	08002291 	.word	0x08002291
 8002268:	0800229b 	.word	0x0800229b
 800226c:	080022a5 	.word	0x080022a5
 8002270:	080022ad 	.word	0x080022ad
 8002274:	080022b5 	.word	0x080022b5
 8002278:	080022bd 	.word	0x080022bd
			{
			case 0:
				GPIOB ->BSRR = GPIO_BSRR_BS8;
 800227c:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 800227e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002282:	611a      	str	r2, [r3, #16]
				break;
 8002284:	e05e      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 1:
				GPIOB ->BSRR = GPIO_BSRR_BS9;
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8002288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228c:	611a      	str	r2, [r3, #16]
				break;
 800228e:	e059      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 2:
				GPIOB ->BSRR = GPIO_BSRR_BS10;
 8002290:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8002292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002296:	611a      	str	r2, [r3, #16]
				break;
 8002298:	e054      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 3:
				GPIOB ->BSRR = GPIO_BSRR_BS12;
 800229a:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 800229c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a0:	611a      	str	r2, [r3, #16]
				break;
 80022a2:	e04f      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 4:
				GPIOA ->BSRR = GPIO_BSRR_BS2;
 80022a4:	4b3a      	ldr	r3, [pc, #232]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80022a6:	2204      	movs	r2, #4
 80022a8:	611a      	str	r2, [r3, #16]
				break;
 80022aa:	e04b      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 5:
				GPIOA ->BSRR = GPIO_BSRR_BS3;
 80022ac:	4b38      	ldr	r3, [pc, #224]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80022ae:	2208      	movs	r2, #8
 80022b0:	611a      	str	r2, [r3, #16]
				break;
 80022b2:	e047      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 6:
				GPIOA ->BSRR = GPIO_BSRR_BS5;
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80022b6:	2220      	movs	r2, #32
 80022b8:	611a      	str	r2, [r3, #16]
				break;
 80022ba:	e043      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 7:
				GPIOB ->BSRR = GPIO_BSRR_BS5;
 80022bc:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80022be:	2220      	movs	r2, #32
 80022c0:	611a      	str	r2, [r3, #16]
				break;
 80022c2:	bf00      	nop
 80022c4:	e03e      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			}
		}
		else
		{
			switch(i)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b07      	cmp	r3, #7
 80022ca:	d83b      	bhi.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 80022cc:	a201      	add	r2, pc, #4	; (adr r2, 80022d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80022ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d2:	bf00      	nop
 80022d4:	080022f5 	.word	0x080022f5
 80022d8:	080022ff 	.word	0x080022ff
 80022dc:	08002309 	.word	0x08002309
 80022e0:	08002313 	.word	0x08002313
 80022e4:	0800231d 	.word	0x0800231d
 80022e8:	08002327 	.word	0x08002327
 80022ec:	08002331 	.word	0x08002331
 80022f0:	0800233b 	.word	0x0800233b
			{
			case 0:
				GPIOB ->BSRR = GPIO_BSRR_BR8;
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80022f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022fa:	611a      	str	r2, [r3, #16]
				break;
 80022fc:	e022      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 1:
				GPIOB ->BSRR = GPIO_BSRR_BR9;
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8002300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002304:	611a      	str	r2, [r3, #16]
				break;
 8002306:	e01d      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 2:
				GPIOB ->BSRR = GPIO_BSRR_BR10;
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 800230a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800230e:	611a      	str	r2, [r3, #16]
				break;
 8002310:	e018      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 3:
				GPIOB ->BSRR = GPIO_BSRR_BR12;
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8002314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002318:	611a      	str	r2, [r3, #16]
				break;
 800231a:	e013      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 4:
				GPIOA ->BSRR = GPIO_BSRR_BR2;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 800231e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002322:	611a      	str	r2, [r3, #16]
				break;
 8002324:	e00e      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 5:
				GPIOA ->BSRR = GPIO_BSRR_BR3;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8002328:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800232c:	611a      	str	r2, [r3, #16]
				break;
 800232e:	e009      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 6:
				GPIOA ->BSRR = GPIO_BSRR_BR5;
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8002332:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002336:	611a      	str	r2, [r3, #16]
				break;
 8002338:	e004      	b.n	8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
			case 7:
				GPIOB ->BSRR = GPIO_BSRR_BR5;
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 800233c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002340:	611a      	str	r2, [r3, #16]
				break;
 8002342:	bf00      	nop
						}

		}
		cmd >>= 1;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	105b      	asrs	r3, r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 800234e:	701a      	strb	r2, [r3, #0]
		i++;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3301      	adds	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	bf00      	nop
	while(i < 8)
 800236a:	e767      	b.n	800223c <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	bf00      	nop
	__NOP();
	__NOP();
	__NOP();
	__NOP();

	can.endit();//割り込み終了
 8002376:	4804      	ldr	r0, [pc, #16]	; (8002388 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8002378:	f7ff fccb 	bl	8001d12 <_ZN8CanClass5enditEv>
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000028 	.word	0x20000028
 8002388:	2000002c 	.word	0x2000002c
 800238c:	40010c00 	.word	0x40010c00
 8002390:	40010800 	.word	0x40010800

08002394 <_ZN8CanClass7receiveIhEEvRT_m>:
    tx_header.StdId = id;
    can_tx(&tx_header, tx_payload);
}

template<typename T>
void CanClass::receive(T &data,uint32_t id)
 8002394:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002398:	b088      	sub	sp, #32
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
{

	status = can_rx(&rx_header, rx_payload);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3364      	adds	r3, #100	; 0x64
 80023ac:	461a      	mov	r2, r3
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f7ff fc9c 	bl	8001cec <_ZN8CanClass6can_rxEP19CAN_RxHeaderTypeDefRA8_h>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	66da      	str	r2, [r3, #108]	; 0x6c

	if (status == HAL_OK or rx_flag == 1)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <_ZN8CanClass7receiveIhEEvRT_m+0x38>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d12f      	bne.n	800242c <_ZN8CanClass7receiveIhEEvRT_m+0x98>
	{
		if(rx_header.StdId == id){
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d126      	bne.n	8002424 <_ZN8CanClass7receiveIhEEvRT_m+0x90>
			_Encapsulator<T> _e;

			for (int i = 0; i < sizeof(T); i++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11d      	bne.n	800241c <_ZN8CanClass7receiveIhEEvRT_m+0x88>
			{
				_e.i = (_e.i << 8) | (uint64_t) (rx_payload[i]);
 80023e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80023e4:	f04f 0b00 	mov.w	fp, #0
 80023e8:	f04f 0c00 	mov.w	ip, #0
 80023ec:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80023f0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80023f4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	440a      	add	r2, r1
 80023fe:	3264      	adds	r2, #100	; 0x64
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	b2d1      	uxtb	r1, r2
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	ea4b 0301 	orr.w	r3, fp, r1
 800240c:	ea4c 0402 	orr.w	r4, ip, r2
 8002410:	e9c7 3404 	strd	r3, r4, [r7, #16]
			for (int i = 0; i < sizeof(T); i++)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3301      	adds	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	e7de      	b.n	80023da <_ZN8CanClass7receiveIhEEvRT_m+0x46>
			}

			data = _e.data;
 800241c:	7c3a      	ldrb	r2, [r7, #16]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	701a      	strb	r2, [r3, #0]
		}
		else{
			rx_flag=1;
		}
	}
}
 8002422:	e003      	b.n	800242c <_ZN8CanClass7receiveIhEEvRT_m+0x98>
			rx_flag=1;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
	...

08002438 <_Z41__static_initialization_and_destruction_0ii>:
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d107      	bne.n	8002458 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800244e:	4293      	cmp	r3, r2
 8002450:	d102      	bne.n	8002458 <_Z41__static_initialization_and_destruction_0ii+0x20>
CanClass can;
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002454:	f7ff faca 	bl	80019ec <_ZN8CanClassC1Ev>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2000002c 	.word	0x2000002c

08002464 <_GLOBAL__sub_I_cmd>:
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
 8002468:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800246c:	2001      	movs	r0, #1
 800246e:	f7ff ffe3 	bl	8002438 <_Z41__static_initialization_and_destruction_0ii>
 8002472:	bd80      	pop	{r7, pc}

08002474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002474:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002476:	e003      	b.n	8002480 <LoopCopyDataInit>

08002478 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800247a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800247c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800247e:	3104      	adds	r1, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002480:	480a      	ldr	r0, [pc, #40]	; (80024ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002484:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002486:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002488:	d3f6      	bcc.n	8002478 <CopyDataInit>
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800248c:	e002      	b.n	8002494 <LoopFillZerobss>

0800248e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002490:	f842 3b04 	str.w	r3, [r2], #4

08002494 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002496:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002498:	d3f9      	bcc.n	800248e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800249a:	f7ff fe61 	bl	8002160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249e:	f000 f80f 	bl	80024c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024a2:	f7ff fc72 	bl	8001d8a <main>
  bx lr
 80024a6:	4770      	bx	lr
  ldr r3, =_sidata
 80024a8:	08002560 	.word	0x08002560
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80024b4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80024b8:	20000104 	.word	0x20000104

080024bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC1_2_IRQHandler>
	...

080024c0 <__libc_init_array>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	2500      	movs	r5, #0
 80024c4:	4e0c      	ldr	r6, [pc, #48]	; (80024f8 <__libc_init_array+0x38>)
 80024c6:	4c0d      	ldr	r4, [pc, #52]	; (80024fc <__libc_init_array+0x3c>)
 80024c8:	1ba4      	subs	r4, r4, r6
 80024ca:	10a4      	asrs	r4, r4, #2
 80024cc:	42a5      	cmp	r5, r4
 80024ce:	d109      	bne.n	80024e4 <__libc_init_array+0x24>
 80024d0:	f000 f822 	bl	8002518 <_init>
 80024d4:	2500      	movs	r5, #0
 80024d6:	4e0a      	ldr	r6, [pc, #40]	; (8002500 <__libc_init_array+0x40>)
 80024d8:	4c0a      	ldr	r4, [pc, #40]	; (8002504 <__libc_init_array+0x44>)
 80024da:	1ba4      	subs	r4, r4, r6
 80024dc:	10a4      	asrs	r4, r4, #2
 80024de:	42a5      	cmp	r5, r4
 80024e0:	d105      	bne.n	80024ee <__libc_init_array+0x2e>
 80024e2:	bd70      	pop	{r4, r5, r6, pc}
 80024e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024e8:	4798      	blx	r3
 80024ea:	3501      	adds	r5, #1
 80024ec:	e7ee      	b.n	80024cc <__libc_init_array+0xc>
 80024ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024f2:	4798      	blx	r3
 80024f4:	3501      	adds	r5, #1
 80024f6:	e7f2      	b.n	80024de <__libc_init_array+0x1e>
 80024f8:	08002554 	.word	0x08002554
 80024fc:	08002554 	.word	0x08002554
 8002500:	08002554 	.word	0x08002554
 8002504:	0800255c 	.word	0x0800255c

08002508 <memset>:
 8002508:	4603      	mov	r3, r0
 800250a:	4402      	add	r2, r0
 800250c:	4293      	cmp	r3, r2
 800250e:	d100      	bne.n	8002512 <memset+0xa>
 8002510:	4770      	bx	lr
 8002512:	f803 1b01 	strb.w	r1, [r3], #1
 8002516:	e7f9      	b.n	800250c <memset+0x4>

08002518 <_init>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	bf00      	nop
 800251c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251e:	bc08      	pop	{r3}
 8002520:	469e      	mov	lr, r3
 8002522:	4770      	bx	lr

08002524 <_fini>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr
